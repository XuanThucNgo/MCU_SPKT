CCS PCM C Compiler, Version 5.015, 5967               06-Dec-23 22:15

               Filename:   E:\BAI TAP VXL\DETHI-GIAIDETHI\2015-2016\BT1_12-2015.lst

               ROM used:   1135 words (14%)
                           Largest free fragment is 2048
               RAM used:   13 (4%) at main() level
                           31 (8%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  03
0001:  MOVWF  0A
0002:  GOTO   346
0003:  NOP
.................... #INCLUDE<16F887.H> 
.................... //////////// Standard Header file for the PIC16F887 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F887 
0004:  DATA CE,23
0005:  DATA 4F,2C
0006:  DATA D5,20
0007:  DATA 4E,2A
0008:  DATA C8,2A
0009:  DATA 43,10
000A:  DATA B2,18
000B:  DATA B1,1A
000C:  DATA B1,19
000D:  DATA 36,18
000E:  DATA 00,00
*
0160:  MOVF   0B,W
0161:  MOVWF  26
0162:  BCF    0B.7
0163:  BSF    03.5
0164:  BSF    03.6
0165:  BSF    0C.7
0166:  BSF    0C.0
0167:  NOP
0168:  NOP
0169:  BCF    03.5
016A:  BCF    03.6
016B:  BTFSC  26.7
016C:  BSF    0B.7
016D:  BSF    03.6
016E:  MOVF   0C,W
016F:  ANDLW  7F
0170:  BTFSC  03.2
0171:  GOTO   1B4
0172:  BCF    03.6
0173:  MOVWF  26
0174:  BSF    03.6
0175:  MOVF   0D,W
0176:  BCF    03.6
0177:  MOVWF  27
0178:  BSF    03.6
0179:  MOVF   0F,W
017A:  BCF    03.6
017B:  MOVWF  28
017C:  MOVF   26,W
017D:  MOVWF  2F
017E:  CALL   134
017F:  MOVF   27,W
0180:  BSF    03.6
0181:  MOVWF  0D
0182:  BCF    03.6
0183:  MOVF   28,W
0184:  BSF    03.6
0185:  MOVWF  0F
0186:  BCF    03.6
0187:  MOVF   0B,W
0188:  MOVWF  29
0189:  BCF    0B.7
018A:  BSF    03.5
018B:  BSF    03.6
018C:  BSF    0C.7
018D:  BSF    0C.0
018E:  NOP
018F:  NOP
0190:  BCF    03.5
0191:  BCF    03.6
0192:  BTFSC  29.7
0193:  BSF    0B.7
0194:  BSF    03.6
0195:  RLF    0C,W
0196:  RLF    0E,W
0197:  ANDLW  7F
0198:  BTFSC  03.2
0199:  GOTO   1B4
019A:  BCF    03.6
019B:  MOVWF  26
019C:  BSF    03.6
019D:  MOVF   0D,W
019E:  BCF    03.6
019F:  MOVWF  27
01A0:  BSF    03.6
01A1:  MOVF   0F,W
01A2:  BCF    03.6
01A3:  MOVWF  28
01A4:  MOVF   26,W
01A5:  MOVWF  2F
01A6:  CALL   134
01A7:  MOVF   27,W
01A8:  BSF    03.6
01A9:  MOVWF  0D
01AA:  BCF    03.6
01AB:  MOVF   28,W
01AC:  BSF    03.6
01AD:  MOVWF  0F
01AE:  INCF   0D,F
01AF:  BTFSC  03.2
01B0:  INCF   0F,F
01B1:  BCF    03.6
01B2:  GOTO   160
01B3:  BSF    03.6
01B4:  BCF    03.6
01B5:  BCF    0A.3
01B6:  BCF    0A.4
01B7:  GOTO   389 (RETURN)
01B8:  CLRF   78
01B9:  CLRF   79
01BA:  CLRF   77
01BB:  CLRF   7A
01BC:  MOVF   29,W
01BD:  BTFSS  03.2
01BE:  GOTO   1C2
01BF:  MOVF   28,W
01C0:  BTFSC  03.2
01C1:  GOTO   1DC
01C2:  MOVLW  10
01C3:  MOVWF  2A
01C4:  BCF    03.0
01C5:  RLF    26,F
01C6:  RLF    27,F
01C7:  RLF    77,F
01C8:  RLF    7A,F
01C9:  MOVF   29,W
01CA:  SUBWF  7A,W
01CB:  BTFSS  03.2
01CC:  GOTO   1CF
01CD:  MOVF   28,W
01CE:  SUBWF  77,W
01CF:  BTFSS  03.0
01D0:  GOTO   1D8
01D1:  MOVF   28,W
01D2:  SUBWF  77,F
01D3:  BTFSS  03.0
01D4:  DECF   7A,F
01D5:  MOVF   29,W
01D6:  SUBWF  7A,F
01D7:  BSF    03.0
01D8:  RLF    78,F
01D9:  RLF    79,F
01DA:  DECFSZ 2A,F
01DB:  GOTO   1C4
01DC:  RETURN
01DD:  MOVLW  8E
01DE:  MOVWF  77
01DF:  MOVF   29,W
01E0:  MOVWF  78
01E1:  MOVF   28,W
01E2:  MOVWF  79
01E3:  CLRF   7A
01E4:  MOVF   78,F
01E5:  BTFSS  03.2
01E6:  GOTO   1F1
01E7:  MOVF   79,W
01E8:  MOVWF  78
01E9:  CLRF   79
01EA:  MOVLW  08
01EB:  SUBWF  77,F
01EC:  MOVF   78,F
01ED:  BTFSS  03.2
01EE:  GOTO   1F1
01EF:  CLRF   77
01F0:  GOTO   1F9
01F1:  BCF    03.0
01F2:  BTFSC  78.7
01F3:  GOTO   1F8
01F4:  RLF    79,F
01F5:  RLF    78,F
01F6:  DECF   77,F
01F7:  GOTO   1F1
01F8:  BCF    78.7
01F9:  RETURN
01FA:  MOVF   28,W
01FB:  BTFSC  03.2
01FC:  GOTO   2BF
01FD:  MOVWF  34
01FE:  MOVF   2C,W
01FF:  BTFSC  03.2
0200:  GOTO   2BF
0201:  SUBWF  34,F
0202:  BTFSS  03.0
0203:  GOTO   209
0204:  MOVLW  7F
0205:  ADDWF  34,F
0206:  BTFSC  03.0
0207:  GOTO   2BF
0208:  GOTO   20F
0209:  MOVLW  81
020A:  SUBWF  34,F
020B:  BTFSS  03.0
020C:  GOTO   2BF
020D:  BTFSC  03.2
020E:  GOTO   2BF
020F:  MOVF   34,W
0210:  MOVWF  77
0211:  CLRF   78
0212:  CLRF   79
0213:  CLRF   7A
0214:  CLRF   33
0215:  MOVF   29,W
0216:  MOVWF  32
0217:  BSF    32.7
0218:  MOVF   2A,W
0219:  MOVWF  31
021A:  MOVF   2B,W
021B:  MOVWF  30
021C:  MOVLW  19
021D:  MOVWF  34
021E:  MOVF   2F,W
021F:  SUBWF  30,F
0220:  BTFSC  03.0
0221:  GOTO   232
0222:  MOVLW  01
0223:  SUBWF  31,F
0224:  BTFSC  03.0
0225:  GOTO   232
0226:  SUBWF  32,F
0227:  BTFSC  03.0
0228:  GOTO   232
0229:  SUBWF  33,F
022A:  BTFSC  03.0
022B:  GOTO   232
022C:  INCF   33,F
022D:  INCF   32,F
022E:  INCF   31,F
022F:  MOVF   2F,W
0230:  ADDWF  30,F
0231:  GOTO   264
0232:  MOVF   2E,W
0233:  SUBWF  31,F
0234:  BTFSC  03.0
0235:  GOTO   24D
0236:  MOVLW  01
0237:  SUBWF  32,F
0238:  BTFSC  03.0
0239:  GOTO   24D
023A:  SUBWF  33,F
023B:  BTFSC  03.0
023C:  GOTO   24D
023D:  INCF   33,F
023E:  INCF   32,F
023F:  MOVF   2E,W
0240:  ADDWF  31,F
0241:  MOVF   2F,W
0242:  ADDWF  30,F
0243:  BTFSS  03.0
0244:  GOTO   264
0245:  INCF   31,F
0246:  BTFSS  03.2
0247:  GOTO   264
0248:  INCF   32,F
0249:  BTFSS  03.2
024A:  GOTO   264
024B:  INCF   33,F
024C:  GOTO   264
024D:  MOVF   2D,W
024E:  IORLW  80
024F:  SUBWF  32,F
0250:  BTFSC  03.0
0251:  GOTO   263
0252:  MOVLW  01
0253:  SUBWF  33,F
0254:  BTFSC  03.0
0255:  GOTO   263
0256:  INCF   33,F
0257:  MOVF   2D,W
0258:  IORLW  80
0259:  ADDWF  32,F
025A:  MOVF   2E,W
025B:  ADDWF  31,F
025C:  BTFSS  03.0
025D:  GOTO   241
025E:  INCF   32,F
025F:  BTFSS  03.2
0260:  GOTO   241
0261:  INCF   33,F
0262:  GOTO   241
0263:  BSF    7A.0
0264:  DECFSZ 34,F
0265:  GOTO   267
0266:  GOTO   272
0267:  BCF    03.0
0268:  RLF    30,F
0269:  RLF    31,F
026A:  RLF    32,F
026B:  RLF    33,F
026C:  BCF    03.0
026D:  RLF    7A,F
026E:  RLF    79,F
026F:  RLF    78,F
0270:  RLF    35,F
0271:  GOTO   21E
0272:  BTFSS  35.0
0273:  GOTO   27A
0274:  BCF    03.0
0275:  RRF    78,F
0276:  RRF    79,F
0277:  RRF    7A,F
0278:  RRF    35,F
0279:  GOTO   27D
027A:  DECF   77,F
027B:  BTFSC  03.2
027C:  GOTO   2BF
027D:  BTFSC  35.7
027E:  GOTO   2A6
027F:  BCF    03.0
0280:  RLF    30,F
0281:  RLF    31,F
0282:  RLF    32,F
0283:  RLF    33,F
0284:  MOVF   2F,W
0285:  SUBWF  30,F
0286:  BTFSC  03.0
0287:  GOTO   292
0288:  MOVLW  01
0289:  SUBWF  31,F
028A:  BTFSC  03.0
028B:  GOTO   292
028C:  SUBWF  32,F
028D:  BTFSC  03.0
028E:  GOTO   292
028F:  SUBWF  33,F
0290:  BTFSS  03.0
0291:  GOTO   2B5
0292:  MOVF   2E,W
0293:  SUBWF  31,F
0294:  BTFSC  03.0
0295:  GOTO   29D
0296:  MOVLW  01
0297:  SUBWF  32,F
0298:  BTFSC  03.0
0299:  GOTO   29D
029A:  SUBWF  33,F
029B:  BTFSS  03.0
029C:  GOTO   2B5
029D:  MOVF   2D,W
029E:  IORLW  80
029F:  SUBWF  32,F
02A0:  BTFSC  03.0
02A1:  GOTO   2A6
02A2:  MOVLW  01
02A3:  SUBWF  33,F
02A4:  BTFSS  03.0
02A5:  GOTO   2B5
02A6:  INCF   7A,F
02A7:  BTFSS  03.2
02A8:  GOTO   2B5
02A9:  INCF   79,F
02AA:  BTFSS  03.2
02AB:  GOTO   2B5
02AC:  INCF   78,F
02AD:  BTFSS  03.2
02AE:  GOTO   2B5
02AF:  INCF   77,F
02B0:  BTFSC  03.2
02B1:  GOTO   2BF
02B2:  RRF    78,F
02B3:  RRF    79,F
02B4:  RRF    7A,F
02B5:  MOVF   29,W
02B6:  MOVWF  34
02B7:  MOVF   2D,W
02B8:  XORWF  34,F
02B9:  BTFSS  34.7
02BA:  GOTO   2BD
02BB:  BSF    78.7
02BC:  GOTO   2C3
02BD:  BCF    78.7
02BE:  GOTO   2C3
02BF:  CLRF   77
02C0:  CLRF   78
02C1:  CLRF   79
02C2:  CLRF   7A
02C3:  RETURN
02C4:  MOVLW  8E
02C5:  MOVWF  77
02C6:  MOVF   26,W
02C7:  SUBWF  77,F
02C8:  MOVF   27,W
02C9:  MOVWF  79
02CA:  MOVF   28,W
02CB:  MOVWF  78
02CC:  BSF    79.7
02CD:  MOVF   77,F
02CE:  BTFSC  03.2
02CF:  GOTO   2DB
02D0:  BCF    03.0
02D1:  MOVF   79,F
02D2:  BTFSS  03.2
02D3:  GOTO   2D7
02D4:  MOVF   78,F
02D5:  BTFSC  03.2
02D6:  GOTO   2DB
02D7:  RRF    79,F
02D8:  RRF    78,F
02D9:  DECFSZ 77,F
02DA:  GOTO   2D0
02DB:  BTFSS  27.7
02DC:  GOTO   2E2
02DD:  COMF   78,F
02DE:  COMF   79,F
02DF:  INCF   78,F
02E0:  BTFSC  03.2
02E1:  INCF   79,F
02E2:  RETURN
02E3:  CLRF   2E
02E4:  MOVF   04,W
02E5:  MOVWF  2D
02E6:  BCF    2E.0
02E7:  BTFSC  03.7
02E8:  BSF    2E.0
02E9:  SWAPF  27,W
02EA:  IORLW  F0
02EB:  MOVWF  29
02EC:  ADDWF  29,F
02ED:  ADDLW  E2
02EE:  MOVWF  2A
02EF:  ADDLW  32
02F0:  MOVWF  2C
02F1:  MOVF   27,W
02F2:  ANDLW  0F
02F3:  ADDWF  2A,F
02F4:  ADDWF  2A,F
02F5:  ADDWF  2C,F
02F6:  ADDLW  E9
02F7:  MOVWF  2B
02F8:  ADDWF  2B,F
02F9:  ADDWF  2B,F
02FA:  SWAPF  26,W
02FB:  ANDLW  0F
02FC:  ADDWF  2B,F
02FD:  ADDWF  2C,F
02FE:  RLF    2B,F
02FF:  RLF    2C,F
0300:  COMF   2C,F
0301:  RLF    2C,F
0302:  MOVF   26,W
0303:  ANDLW  0F
0304:  ADDWF  2C,F
0305:  RLF    29,F
0306:  MOVLW  07
0307:  MOVWF  28
0308:  MOVLW  0A
0309:  ADDWF  2C,F
030A:  DECF   2B,F
030B:  BTFSS  03.0
030C:  GOTO   309
030D:  ADDWF  2B,F
030E:  DECF   2A,F
030F:  BTFSS  03.0
0310:  GOTO   30D
0311:  ADDWF  2A,F
0312:  DECF   29,F
0313:  BTFSS  03.0
0314:  GOTO   311
0315:  ADDWF  29,F
0316:  DECF   28,F
0317:  BTFSS  03.0
0318:  GOTO   315
0319:  MOVLW  28
031A:  MOVWF  04
031B:  BCF    03.7
031C:  MOVLW  07
031D:  ANDWF  2D,W
031E:  BCF    2D.6
031F:  ADDWF  04,F
0320:  MOVLW  2C
0321:  SUBWF  04,W
0322:  BTFSC  03.2
0323:  BSF    2D.6
0324:  MOVF   00,W
0325:  MOVWF  77
0326:  BTFSS  03.2
0327:  GOTO   330
0328:  BTFSC  2D.6
0329:  GOTO   330
032A:  BTFSC  2D.4
032B:  GOTO   342
032C:  BTFSC  2D.3
032D:  GOTO   330
032E:  MOVLW  20
032F:  GOTO   333
0330:  BSF    2D.3
0331:  BCF    2D.4
0332:  MOVLW  30
0333:  ADDWF  77,F
0334:  CLRF   27
0335:  MOVF   04,W
0336:  MOVWF  26
0337:  BCF    27.0
0338:  BTFSC  03.7
0339:  BSF    27.0
033A:  MOVF   77,W
033B:  MOVWF  2F
033C:  CALL   134
033D:  MOVF   26,W
033E:  MOVWF  04
033F:  BCF    03.7
0340:  BTFSC  27.0
0341:  BSF    03.7
0342:  INCF   04,F
0343:  BTFSS  2D.6
0344:  GOTO   320
0345:  RETURN
....................  
.................... #list 
....................  
.................... #DEVICE ADC=10 
.................... #FUSES INTRC 
.................... #USE DELAY(CLOCK=8M) 
*
000F:  MOVLW  30
0010:  MOVWF  04
0011:  BCF    03.7
0012:  MOVF   00,W
0013:  BTFSC  03.2
0014:  GOTO   022
0015:  MOVLW  02
0016:  MOVWF  78
0017:  CLRF   77
0018:  DECFSZ 77,F
0019:  GOTO   018
001A:  DECFSZ 78,F
001B:  GOTO   017
001C:  MOVLW  97
001D:  MOVWF  77
001E:  DECFSZ 77,F
001F:  GOTO   01E
0020:  DECFSZ 00,F
0021:  GOTO   015
0022:  RETURN
....................  
.................... #DEFINE LED_A PIN_B0 
.................... #DEFINE LED_B PIN_B1 
....................  
.................... #define LCD_ENABLE_PIN  PIN_D3                                     
.................... #define LCD_RS_PIN      PIN_D1                                    
.................... #define LCD_RW_PIN      PIN_D2                                     
.................... #define LCD_DATA4       PIN_D4                                     
.................... #define LCD_DATA5       PIN_D5                                    
.................... #define LCD_DATA6       PIN_D6                                     
.................... #define LCD_DATA7       PIN_D7 
....................  
.................... #INCLUDE<LCD.C> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
*
0088:  BSF    08.4
....................    output_float(LCD_DATA5); 
0089:  BSF    08.5
....................    output_float(LCD_DATA6); 
008A:  BSF    08.6
....................    output_float(LCD_DATA7); 
008B:  BSF    08.7
....................   #else 
....................    lcdtris.data = 0xF; 
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
008C:  BCF    03.5
008D:  BSF    08.2
008E:  BSF    03.5
008F:  BCF    08.2
....................    delay_cycles(1); 
0090:  NOP
....................    lcd_output_enable(1); 
0091:  BCF    03.5
0092:  BSF    08.3
0093:  BSF    03.5
0094:  BCF    08.3
....................    delay_cycles(1); 
0095:  NOP
....................    high = lcd_read_nibble(); 
0096:  BCF    03.5
0097:  CALL   04F
0098:  MOVF   78,W
0099:  MOVWF  37
....................        
....................    lcd_output_enable(0); 
009A:  BCF    08.3
009B:  BSF    03.5
009C:  BCF    08.3
....................    delay_cycles(1); 
009D:  NOP
....................    lcd_output_enable(1); 
009E:  BCF    03.5
009F:  BSF    08.3
00A0:  BSF    03.5
00A1:  BCF    08.3
....................    delay_us(1); 
00A2:  GOTO   0A3
....................    low = lcd_read_nibble(); 
00A3:  BCF    03.5
00A4:  CALL   04F
00A5:  MOVF   78,W
00A6:  MOVWF  36
....................        
....................    lcd_output_enable(0); 
00A7:  BCF    08.3
00A8:  BSF    03.5
00A9:  BCF    08.3
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
00AA:  BCF    08.4
....................    output_drive(LCD_DATA5); 
00AB:  BCF    08.5
....................    output_drive(LCD_DATA6); 
00AC:  BCF    08.6
....................    output_drive(LCD_DATA7); 
00AD:  BCF    08.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
00AE:  BCF    03.5
00AF:  SWAPF  37,W
00B0:  MOVWF  77
00B1:  MOVLW  F0
00B2:  ANDWF  77,F
00B3:  MOVF   77,W
00B4:  IORWF  36,W
00B5:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
*
004F:  CLRF   38
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
0050:  BSF    03.5
0051:  BSF    08.4
0052:  MOVLW  00
0053:  BCF    03.5
0054:  BTFSC  08.4
0055:  MOVLW  01
0056:  IORWF  38,F
....................    n |= input(LCD_DATA5) << 1; 
0057:  BSF    03.5
0058:  BSF    08.5
0059:  MOVLW  00
005A:  BCF    03.5
005B:  BTFSC  08.5
005C:  MOVLW  01
005D:  MOVWF  77
005E:  BCF    03.0
005F:  RLF    77,F
0060:  MOVF   77,W
0061:  IORWF  38,F
....................    n |= input(LCD_DATA6) << 2; 
0062:  BSF    03.5
0063:  BSF    08.6
0064:  MOVLW  00
0065:  BCF    03.5
0066:  BTFSC  08.6
0067:  MOVLW  01
0068:  MOVWF  77
0069:  RLF    77,F
006A:  RLF    77,F
006B:  MOVLW  FC
006C:  ANDWF  77,F
006D:  MOVF   77,W
006E:  IORWF  38,F
....................    n |= input(LCD_DATA7) << 3; 
006F:  BSF    03.5
0070:  BSF    08.7
0071:  MOVLW  00
0072:  BCF    03.5
0073:  BTFSC  08.7
0074:  MOVLW  01
0075:  MOVWF  77
0076:  RLF    77,F
0077:  RLF    77,F
0078:  RLF    77,F
0079:  MOVLW  F8
007A:  ANDWF  77,F
007B:  MOVF   77,W
007C:  IORWF  38,F
....................     
....................    return(n); 
007D:  MOVF   38,W
007E:  MOVWF  78
....................   #else 
007F:  RETURN
....................    return(lcd.data); 
....................   #endif 
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
*
0023:  BTFSC  37.0
0024:  GOTO   027
0025:  BCF    08.4
0026:  GOTO   028
0027:  BSF    08.4
0028:  BSF    03.5
0029:  BCF    08.4
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
002A:  BCF    03.5
002B:  BTFSC  37.1
002C:  GOTO   02F
002D:  BCF    08.5
002E:  GOTO   030
002F:  BSF    08.5
0030:  BSF    03.5
0031:  BCF    08.5
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
0032:  BCF    03.5
0033:  BTFSC  37.2
0034:  GOTO   037
0035:  BCF    08.6
0036:  GOTO   038
0037:  BSF    08.6
0038:  BSF    03.5
0039:  BCF    08.6
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
003A:  BCF    03.5
003B:  BTFSC  37.3
003C:  GOTO   03F
003D:  BCF    08.7
003E:  GOTO   040
003F:  BSF    08.7
0040:  BSF    03.5
0041:  BCF    08.7
....................   #else       
....................    lcdlat.data = n; 
....................   #endif 
....................        
....................    delay_cycles(1); 
0042:  NOP
....................    lcd_output_enable(1); 
0043:  BCF    03.5
0044:  BSF    08.3
0045:  BSF    03.5
0046:  BCF    08.3
....................    delay_us(2); 
0047:  GOTO   048
0048:  GOTO   049
....................    lcd_output_enable(0); 
0049:  BCF    03.5
004A:  BCF    08.3
004B:  BSF    03.5
004C:  BCF    08.3
004D:  BCF    03.5
004E:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0080:  BSF    03.5
0081:  BCF    08.3
....................    lcd_rs_tris(); 
0082:  BCF    08.1
....................    lcd_rw_tris(); 
0083:  BCF    08.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0084:  BCF    03.5
0085:  BCF    08.1
0086:  BSF    03.5
0087:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
00B6:  MOVF   78,W
00B7:  MOVWF  36
00B8:  BTFSS  36.7
00B9:  GOTO   0BC
00BA:  BSF    03.5
00BB:  GOTO   088
....................    lcd_output_rs(address); 
00BC:  MOVF   34,F
00BD:  BTFSS  03.2
00BE:  GOTO   0C1
00BF:  BCF    08.1
00C0:  GOTO   0C2
00C1:  BSF    08.1
00C2:  BSF    03.5
00C3:  BCF    08.1
....................    delay_cycles(1); 
00C4:  NOP
....................    lcd_output_rw(0); 
00C5:  BCF    03.5
00C6:  BCF    08.2
00C7:  BSF    03.5
00C8:  BCF    08.2
....................    delay_cycles(1); 
00C9:  NOP
....................    lcd_output_enable(0); 
00CA:  BCF    03.5
00CB:  BCF    08.3
00CC:  BSF    03.5
00CD:  BCF    08.3
....................    lcd_send_nibble(n >> 4); 
00CE:  BCF    03.5
00CF:  SWAPF  35,W
00D0:  MOVWF  36
00D1:  MOVLW  0F
00D2:  ANDWF  36,F
00D3:  MOVF   36,W
00D4:  MOVWF  37
00D5:  CALL   023
....................    lcd_send_nibble(n & 0xf); 
00D6:  MOVF   35,W
00D7:  ANDLW  0F
00D8:  MOVWF  36
00D9:  MOVWF  37
00DA:  CALL   023
00DB:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
00DC:  MOVLW  28
00DD:  MOVWF  27
00DE:  MOVLW  0C
00DF:  MOVWF  28
00E0:  MOVLW  01
00E1:  MOVWF  29
00E2:  MOVLW  06
00E3:  MOVWF  2A
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
00E4:  BCF    08.3
00E5:  BSF    03.5
00E6:  BCF    08.3
....................    lcd_output_rs(0); 
00E7:  BCF    03.5
00E8:  BCF    08.1
00E9:  BSF    03.5
00EA:  BCF    08.1
....................    lcd_output_rw(0); 
00EB:  BCF    03.5
00EC:  BCF    08.2
00ED:  BSF    03.5
00EE:  BCF    08.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
00EF:  BCF    08.4
....................    output_drive(LCD_DATA5); 
00F0:  BCF    08.5
....................    output_drive(LCD_DATA6); 
00F1:  BCF    08.6
....................    output_drive(LCD_DATA7); 
00F2:  BCF    08.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................    lcd_enable_tris(); 
00F3:  BCF    08.3
....................    lcd_rs_tris(); 
00F4:  BCF    08.1
....................    lcd_rw_tris(); 
00F5:  BCF    08.2
....................  #endif 
....................      
....................    delay_ms(15); 
00F6:  MOVLW  0F
00F7:  BCF    03.5
00F8:  MOVWF  30
00F9:  CALL   00F
....................    for(i=1;i<=3;++i) 
00FA:  MOVLW  01
00FB:  MOVWF  26
00FC:  MOVF   26,W
00FD:  SUBLW  03
00FE:  BTFSS  03.0
00FF:  GOTO   108
....................    { 
....................        lcd_send_nibble(3); 
0100:  MOVLW  03
0101:  MOVWF  37
0102:  CALL   023
....................        delay_ms(5); 
0103:  MOVLW  05
0104:  MOVWF  30
0105:  CALL   00F
0106:  INCF   26,F
0107:  GOTO   0FC
....................    } 
....................     
....................    lcd_send_nibble(2); 
0108:  MOVLW  02
0109:  MOVWF  37
010A:  CALL   023
....................    delay_ms(5); 
010B:  MOVLW  05
010C:  MOVWF  30
010D:  CALL   00F
....................    for(i=0;i<=3;++i) 
010E:  CLRF   26
010F:  MOVF   26,W
0110:  SUBLW  03
0111:  BTFSS  03.0
0112:  GOTO   11F
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
0113:  MOVLW  27
0114:  ADDWF  26,W
0115:  MOVWF  04
0116:  BCF    03.7
0117:  MOVF   00,W
0118:  MOVWF  2B
0119:  CLRF   34
011A:  MOVF   2B,W
011B:  MOVWF  35
011C:  CALL   080
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
011D:  INCF   26,F
011E:  GOTO   10F
011F:  BCF    0A.3
0120:  BCF    0A.4
0121:  GOTO   36B (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
0122:  DECFSZ 31,W
0123:  GOTO   125
0124:  GOTO   128
....................       address=LCD_LINE_TWO; 
0125:  MOVLW  40
0126:  MOVWF  32
0127:  GOTO   129
....................    else 
....................       address=0; 
0128:  CLRF   32
....................       
....................    address+=x-1; 
0129:  MOVLW  01
012A:  SUBWF  30,W
012B:  ADDWF  32,F
....................    lcd_send_byte(0,0x80|address); 
012C:  MOVF   32,W
012D:  IORLW  80
012E:  MOVWF  33
012F:  CLRF   34
0130:  MOVF   33,W
0131:  MOVWF  35
0132:  CALL   080
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0133:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
0134:  MOVF   2F,W
0135:  XORLW  07
0136:  BTFSC  03.2
0137:  GOTO   142
0138:  XORLW  0B
0139:  BTFSC  03.2
013A:  GOTO   147
013B:  XORLW  06
013C:  BTFSC  03.2
013D:  GOTO   14F
013E:  XORLW  02
013F:  BTFSC  03.2
0140:  GOTO   155
0141:  GOTO   15A
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
0142:  MOVLW  01
0143:  MOVWF  30
0144:  MOVWF  31
0145:  CALL   122
0146:  GOTO   15F
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
0147:  CLRF   34
0148:  MOVLW  01
0149:  MOVWF  35
014A:  CALL   080
....................                      delay_ms(2); 
014B:  MOVLW  02
014C:  MOVWF  30
014D:  CALL   00F
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
014E:  GOTO   15F
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
014F:  MOVLW  01
0150:  MOVWF  30
0151:  MOVLW  02
0152:  MOVWF  31
0153:  CALL   122
0154:  GOTO   15F
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
0155:  CLRF   34
0156:  MOVLW  10
0157:  MOVWF  35
0158:  CALL   080
0159:  GOTO   15F
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
015A:  MOVLW  01
015B:  MOVWF  34
015C:  MOVF   2F,W
015D:  MOVWF  35
015E:  CALL   080
....................      #endif 
....................    } 
015F:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
.................... UNSIGNED INT16 TEMP1,TEMP2; 
.................... UNSIGNED INT8 I; 
....................  
.................... VOID MAIN() 
*
0346:  MOVF   03,W
0347:  ANDLW  1F
0348:  MOVWF  03
0349:  MOVLW  71
034A:  BSF    03.5
034B:  MOVWF  0F
034C:  MOVF   0F,W
034D:  MOVLW  FF
034E:  BCF    03.5
034F:  MOVWF  25
0350:  BSF    03.5
0351:  BSF    03.6
0352:  MOVF   09,W
0353:  ANDLW  C0
0354:  MOVWF  09
0355:  BCF    03.6
0356:  BCF    1F.4
0357:  BCF    1F.5
0358:  MOVLW  00
0359:  BSF    03.6
035A:  MOVWF  08
035B:  BCF    03.5
035C:  CLRF   07
035D:  CLRF   08
035E:  CLRF   09
035F:  BCF    03.7
.................... { 
....................    SET_TRIS_B(0X00); 
0360:  MOVLW  00
0361:  BSF    03.5
0362:  BCF    03.6
0363:  MOVWF  06
....................    SET_TRIS_C(0X00); 
0364:  MOVWF  07
0365:  BCF    03.5
0366:  MOVWF  25
....................    SET_TRIS_D(0X00); 
0367:  BSF    03.5
0368:  MOVWF  08
....................     
....................    //INSTALL LCD 
....................    LCD_INIT(); 
0369:  BCF    03.5
036A:  GOTO   0DC
....................     
....................    //SETUP ADC 
....................    SETUP_ADC(ADC_CLOCK_INTERNAL); 
036B:  BSF    1F.6
036C:  BSF    1F.7
036D:  BSF    03.5
036E:  BSF    1F.7
036F:  BCF    03.5
0370:  BSF    1F.0
....................    SETUP_ADC_PORTS(SAN5|SAN6|VSS_VDD); 
0371:  BSF    03.5
0372:  BSF    03.6
0373:  MOVF   09,W
0374:  ANDLW  C0
0375:  MOVWF  09
0376:  BCF    03.6
0377:  BCF    1F.4
0378:  BCF    1F.5
0379:  MOVLW  60
037A:  BSF    03.6
037B:  MOVWF  08
....................     
....................    LCD_GOTOXY(1,1); 
037C:  MOVLW  01
037D:  BCF    03.5
037E:  BCF    03.6
037F:  MOVWF  30
0380:  MOVWF  31
0381:  CALL   122
....................    LCD_PUTC("NGOXUANTHUC 21151360"); 
0382:  MOVLW  04
0383:  BSF    03.6
0384:  MOVWF  0D
0385:  MOVLW  00
0386:  MOVWF  0F
0387:  BCF    03.6
0388:  GOTO   160
....................     
....................    WHILE(TRUE) 
....................    { 
....................       //DOC TEMP1 
....................       SET_ADC_CHANNEL(5); 
0389:  MOVLW  14
038A:  MOVWF  78
038B:  MOVF   1F,W
038C:  ANDLW  C3
038D:  IORWF  78,W
038E:  MOVWF  1F
....................       FOR(I=0;I<100;I++) 
038F:  CLRF   24
0390:  MOVF   24,W
0391:  SUBLW  63
0392:  BTFSS  03.0
0393:  GOTO   3A1
....................       { 
....................          TEMP1=TEMP1+READ_ADC();        
0394:  BSF    1F.1
0395:  BTFSC  1F.1
0396:  GOTO   395
0397:  BSF    03.5
0398:  MOVF   1E,W
0399:  BCF    03.5
039A:  ADDWF  20,F
039B:  MOVF   1E,W
039C:  BTFSC  03.0
039D:  INCFSZ 1E,W
039E:  ADDWF  21,F
039F:  INCF   24,F
03A0:  GOTO   390
....................       } 
....................       TEMP1=TEMP1/100/2.046; 
03A1:  MOVF   21,W
03A2:  MOVWF  27
03A3:  MOVF   20,W
03A4:  MOVWF  26
03A5:  CLRF   29
03A6:  MOVLW  64
03A7:  MOVWF  28
03A8:  CALL   1B8
03A9:  MOVF   79,W
03AA:  MOVWF  27
03AB:  MOVF   78,W
03AC:  MOVWF  26
03AD:  MOVF   79,W
03AE:  MOVWF  29
03AF:  MOVF   78,W
03B0:  MOVWF  28
03B1:  CALL   1DD
03B2:  MOVF   7A,W
03B3:  MOVWF  2B
03B4:  MOVF   79,W
03B5:  MOVWF  2A
03B6:  MOVF   78,W
03B7:  MOVWF  29
03B8:  MOVF   77,W
03B9:  MOVWF  28
03BA:  MOVLW  AA
03BB:  MOVWF  2F
03BC:  MOVLW  F1
03BD:  MOVWF  2E
03BE:  MOVLW  02
03BF:  MOVWF  2D
03C0:  MOVLW  80
03C1:  MOVWF  2C
03C2:  CALL   1FA
03C3:  MOVF   7A,W
03C4:  MOVWF  29
03C5:  MOVF   79,W
03C6:  MOVWF  28
03C7:  MOVF   78,W
03C8:  MOVWF  27
03C9:  MOVF   77,W
03CA:  MOVWF  26
03CB:  CALL   2C4
03CC:  MOVF   79,W
03CD:  MOVWF  21
03CE:  MOVF   78,W
03CF:  MOVWF  20
....................       LCD_GOTOXY(1,2); 
03D0:  MOVLW  01
03D1:  MOVWF  30
03D2:  MOVLW  02
03D3:  MOVWF  31
03D4:  CALL   122
....................       PRINTF(LCD_PUTC,"T1=%03LU",TEMP1); 
03D5:  MOVLW  54
03D6:  MOVWF  2F
03D7:  CALL   134
03D8:  MOVLW  31
03D9:  MOVWF  2F
03DA:  CALL   134
03DB:  MOVLW  3D
03DC:  MOVWF  2F
03DD:  CALL   134
03DE:  MOVLW  0A
03DF:  MOVWF  04
03E0:  MOVF   21,W
03E1:  MOVWF  27
03E2:  MOVF   20,W
03E3:  MOVWF  26
03E4:  CALL   2E3
....................       LCD_PUTC(223); LCD_PUTC('C'); 
03E5:  MOVLW  DF
03E6:  MOVWF  2F
03E7:  CALL   134
03E8:  MOVLW  43
03E9:  MOVWF  2F
03EA:  CALL   134
....................       //DOC TEMP1 
....................       SET_ADC_CHANNEL(6); 
03EB:  MOVLW  18
03EC:  MOVWF  78
03ED:  MOVF   1F,W
03EE:  ANDLW  C3
03EF:  IORWF  78,W
03F0:  MOVWF  1F
....................       FOR(I=0;I<100;I++) 
03F1:  CLRF   24
03F2:  MOVF   24,W
03F3:  SUBLW  63
03F4:  BTFSS  03.0
03F5:  GOTO   403
....................       { 
....................          TEMP2=TEMP2+READ_ADC();        
03F6:  BSF    1F.1
03F7:  BTFSC  1F.1
03F8:  GOTO   3F7
03F9:  BSF    03.5
03FA:  MOVF   1E,W
03FB:  BCF    03.5
03FC:  ADDWF  22,F
03FD:  MOVF   1E,W
03FE:  BTFSC  03.0
03FF:  INCFSZ 1E,W
0400:  ADDWF  23,F
0401:  INCF   24,F
0402:  GOTO   3F2
....................       } 
....................       TEMP2=TEMP2/100/2.046; 
0403:  MOVF   23,W
0404:  MOVWF  27
0405:  MOVF   22,W
0406:  MOVWF  26
0407:  CLRF   29
0408:  MOVLW  64
0409:  MOVWF  28
040A:  CALL   1B8
040B:  MOVF   79,W
040C:  MOVWF  27
040D:  MOVF   78,W
040E:  MOVWF  26
040F:  MOVF   79,W
0410:  MOVWF  29
0411:  MOVF   78,W
0412:  MOVWF  28
0413:  CALL   1DD
0414:  MOVF   7A,W
0415:  MOVWF  2B
0416:  MOVF   79,W
0417:  MOVWF  2A
0418:  MOVF   78,W
0419:  MOVWF  29
041A:  MOVF   77,W
041B:  MOVWF  28
041C:  MOVLW  AA
041D:  MOVWF  2F
041E:  MOVLW  F1
041F:  MOVWF  2E
0420:  MOVLW  02
0421:  MOVWF  2D
0422:  MOVLW  80
0423:  MOVWF  2C
0424:  CALL   1FA
0425:  MOVF   7A,W
0426:  MOVWF  29
0427:  MOVF   79,W
0428:  MOVWF  28
0429:  MOVF   78,W
042A:  MOVWF  27
042B:  MOVF   77,W
042C:  MOVWF  26
042D:  CALL   2C4
042E:  MOVF   79,W
042F:  MOVWF  23
0430:  MOVF   78,W
0431:  MOVWF  22
....................       LCD_GOTOXY(13,2); 
0432:  MOVLW  0D
0433:  MOVWF  30
0434:  MOVLW  02
0435:  MOVWF  31
0436:  CALL   122
....................       PRINTF(LCD_PUTC,"T2=%03LU",TEMP2); 
0437:  MOVLW  54
0438:  MOVWF  2F
0439:  CALL   134
043A:  MOVLW  32
043B:  MOVWF  2F
043C:  CALL   134
043D:  MOVLW  3D
043E:  MOVWF  2F
043F:  CALL   134
0440:  MOVLW  0A
0441:  MOVWF  04
0442:  MOVF   23,W
0443:  MOVWF  27
0444:  MOVF   22,W
0445:  MOVWF  26
0446:  CALL   2E3
....................       LCD_PUTC(223); LCD_PUTC('C'); 
0447:  MOVLW  DF
0448:  MOVWF  2F
0449:  CALL   134
044A:  MOVLW  43
044B:  MOVWF  2F
044C:  CALL   134
....................       //LED_A 
....................       IF(TEMP1>40)   OUTPUT_HIGH(LED_A); 
044D:  MOVF   21,F
044E:  BTFSS  03.2
044F:  GOTO   454
0450:  MOVF   20,W
0451:  SUBLW  28
0452:  BTFSC  03.0
0453:  GOTO   459
0454:  BSF    03.5
0455:  BCF    06.0
0456:  BCF    03.5
0457:  BSF    06.0
0458:  GOTO   45D
....................       ELSE           OUTPUT_LOW(LED_A); 
0459:  BSF    03.5
045A:  BCF    06.0
045B:  BCF    03.5
045C:  BCF    06.0
....................       //LED_B 
....................       IF(TEMP2>45)   OUTPUT_HIGH(LED_B); 
045D:  MOVF   23,F
045E:  BTFSS  03.2
045F:  GOTO   464
0460:  MOVF   22,W
0461:  SUBLW  2D
0462:  BTFSC  03.0
0463:  GOTO   469
0464:  BSF    03.5
0465:  BCF    06.1
0466:  BCF    03.5
0467:  BSF    06.1
0468:  GOTO   46D
....................       ELSE           OUTPUT_LOW(LED_B); 
0469:  BSF    03.5
046A:  BCF    06.1
046B:  BCF    03.5
046C:  BCF    06.1
046D:  GOTO   389
....................    } 
.................... } 
....................  
046E:  SLEEP

Configuration Fuses:
   Word  1: 2FE5   INTRC NOWDT PUT MCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
