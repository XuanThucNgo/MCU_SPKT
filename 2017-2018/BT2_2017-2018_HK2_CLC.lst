CCS PCM C Compiler, Version 5.015, 5967               16-Dec-23 02:58

               Filename:   E:\BAI TAP VXL\DETHI-GIAIDETHI\2017-2018\BT2_2017-2018_HK2_CLC.lst

               ROM used:   698 words (9%)
                           Largest free fragment is 2048
               RAM used:   9 (2%) at main() level
                           22 (6%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   1CA
0003:  NOP
.................... #INCLUDE<16F887.H> 
.................... //////////// Standard Header file for the PIC16F887 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F887 
0004:  DATA C4,2A
0005:  DATA D4,2C
0006:  DATA A0,21
0007:  DATA D9,21
0008:  DATA CC,22
0009:  DATA 00,00
000A:  DATA 53,2A
000B:  DATA 41,2A
000C:  DATA D5,29
000D:  DATA 00,01
000E:  DATA B0,19
000F:  DATA B0,12
0010:  DATA 00,01
0011:  DATA B0,1B
0012:  DATA B0,12
0013:  DATA 00,01
0014:  DATA 31,18
0015:  DATA B0,12
0016:  DATA 00,01
0017:  DATA 53,2A
0018:  DATA 4F,28
0019:  DATA 00,01
001A:  DATA D2,2A
001B:  DATA 4E,10
001C:  DATA 00,00
*
0174:  MOVF   0B,W
0175:  MOVWF  23
0176:  BCF    0B.7
0177:  BSF    03.5
0178:  BSF    03.6
0179:  BSF    0C.7
017A:  BSF    0C.0
017B:  NOP
017C:  NOP
017D:  BCF    03.5
017E:  BCF    03.6
017F:  BTFSC  23.7
0180:  BSF    0B.7
0181:  BSF    03.6
0182:  MOVF   0C,W
0183:  ANDLW  7F
0184:  BTFSC  03.2
0185:  GOTO   1C8
0186:  BCF    03.6
0187:  MOVWF  23
0188:  BSF    03.6
0189:  MOVF   0D,W
018A:  BCF    03.6
018B:  MOVWF  24
018C:  BSF    03.6
018D:  MOVF   0F,W
018E:  BCF    03.6
018F:  MOVWF  25
0190:  MOVF   23,W
0191:  MOVWF  26
0192:  CALL   148
0193:  MOVF   24,W
0194:  BSF    03.6
0195:  MOVWF  0D
0196:  BCF    03.6
0197:  MOVF   25,W
0198:  BSF    03.6
0199:  MOVWF  0F
019A:  BCF    03.6
019B:  MOVF   0B,W
019C:  MOVWF  26
019D:  BCF    0B.7
019E:  BSF    03.5
019F:  BSF    03.6
01A0:  BSF    0C.7
01A1:  BSF    0C.0
01A2:  NOP
01A3:  NOP
01A4:  BCF    03.5
01A5:  BCF    03.6
01A6:  BTFSC  26.7
01A7:  BSF    0B.7
01A8:  BSF    03.6
01A9:  RLF    0C,W
01AA:  RLF    0E,W
01AB:  ANDLW  7F
01AC:  BTFSC  03.2
01AD:  GOTO   1C8
01AE:  BCF    03.6
01AF:  MOVWF  23
01B0:  BSF    03.6
01B1:  MOVF   0D,W
01B2:  BCF    03.6
01B3:  MOVWF  24
01B4:  BSF    03.6
01B5:  MOVF   0F,W
01B6:  BCF    03.6
01B7:  MOVWF  25
01B8:  MOVF   23,W
01B9:  MOVWF  26
01BA:  CALL   148
01BB:  MOVF   24,W
01BC:  BSF    03.6
01BD:  MOVWF  0D
01BE:  BCF    03.6
01BF:  MOVF   25,W
01C0:  BSF    03.6
01C1:  MOVWF  0F
01C2:  INCF   0D,F
01C3:  BTFSC  03.2
01C4:  INCF   0F,F
01C5:  BCF    03.6
01C6:  GOTO   174
01C7:  BSF    03.6
01C8:  BCF    03.6
01C9:  RETURN
....................  
.................... #list 
....................  
.................... #FUSES HS 
.................... #USE DELAY(CLOCK=20M) 
*
001D:  MOVLW  28
001E:  MOVWF  04
001F:  BCF    03.7
0020:  MOVF   00,W
0021:  BTFSC  03.2
0022:  GOTO   030
0023:  MOVLW  06
0024:  MOVWF  78
0025:  CLRF   77
0026:  DECFSZ 77,F
0027:  GOTO   026
0028:  DECFSZ 78,F
0029:  GOTO   025
002A:  MOVLW  7B
002B:  MOVWF  77
002C:  DECFSZ 77,F
002D:  GOTO   02C
002E:  DECFSZ 00,F
002F:  GOTO   023
0030:  RETURN
....................  
.................... #DEFINE SPEED     PIN_B1 
.................... #DEFINE RUN_STOP  PIN_B2  
....................  
.................... #define LCD_ENABLE_PIN  PIN_D3                                    
.................... #define LCD_RS_PIN      PIN_D1                                    
.................... #define LCD_RW_PIN      PIN_D2                                    
.................... #define LCD_DATA4       PIN_D4                                     
.................... #define LCD_DATA5       PIN_D5                                    
.................... #define LCD_DATA6       PIN_D6                                   
.................... #define LCD_DATA7       PIN_D7  
....................  
.................... #INCLUDE<LCD.C> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
*
009A:  BSF    08.4
....................    output_float(LCD_DATA5); 
009B:  BSF    08.5
....................    output_float(LCD_DATA6); 
009C:  BSF    08.6
....................    output_float(LCD_DATA7); 
009D:  BSF    08.7
....................   #else 
....................    lcdtris.data = 0xF; 
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
009E:  BCF    03.5
009F:  BSF    08.2
00A0:  BSF    03.5
00A1:  BCF    08.2
....................    delay_cycles(1); 
00A2:  NOP
....................    lcd_output_enable(1); 
00A3:  BCF    03.5
00A4:  BSF    08.3
00A5:  BSF    03.5
00A6:  BCF    08.3
....................    delay_cycles(1); 
00A7:  NOP
....................    high = lcd_read_nibble(); 
00A8:  BCF    03.5
00A9:  CALL   061
00AA:  MOVF   78,W
00AB:  MOVWF  2E
....................        
....................    lcd_output_enable(0); 
00AC:  BCF    08.3
00AD:  BSF    03.5
00AE:  BCF    08.3
....................    delay_cycles(1); 
00AF:  NOP
....................    lcd_output_enable(1); 
00B0:  BCF    03.5
00B1:  BSF    08.3
00B2:  BSF    03.5
00B3:  BCF    08.3
....................    delay_us(1); 
00B4:  GOTO   0B5
00B5:  GOTO   0B6
00B6:  NOP
....................    low = lcd_read_nibble(); 
00B7:  BCF    03.5
00B8:  CALL   061
00B9:  MOVF   78,W
00BA:  MOVWF  2D
....................        
....................    lcd_output_enable(0); 
00BB:  BCF    08.3
00BC:  BSF    03.5
00BD:  BCF    08.3
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
00BE:  BCF    08.4
....................    output_drive(LCD_DATA5); 
00BF:  BCF    08.5
....................    output_drive(LCD_DATA6); 
00C0:  BCF    08.6
....................    output_drive(LCD_DATA7); 
00C1:  BCF    08.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
00C2:  BCF    03.5
00C3:  SWAPF  2E,W
00C4:  MOVWF  77
00C5:  MOVLW  F0
00C6:  ANDWF  77,F
00C7:  MOVF   77,W
00C8:  IORWF  2D,W
00C9:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
*
0061:  CLRF   2F
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
0062:  BSF    03.5
0063:  BSF    08.4
0064:  MOVLW  00
0065:  BCF    03.5
0066:  BTFSC  08.4
0067:  MOVLW  01
0068:  IORWF  2F,F
....................    n |= input(LCD_DATA5) << 1; 
0069:  BSF    03.5
006A:  BSF    08.5
006B:  MOVLW  00
006C:  BCF    03.5
006D:  BTFSC  08.5
006E:  MOVLW  01
006F:  MOVWF  77
0070:  BCF    03.0
0071:  RLF    77,F
0072:  MOVF   77,W
0073:  IORWF  2F,F
....................    n |= input(LCD_DATA6) << 2; 
0074:  BSF    03.5
0075:  BSF    08.6
0076:  MOVLW  00
0077:  BCF    03.5
0078:  BTFSC  08.6
0079:  MOVLW  01
007A:  MOVWF  77
007B:  RLF    77,F
007C:  RLF    77,F
007D:  MOVLW  FC
007E:  ANDWF  77,F
007F:  MOVF   77,W
0080:  IORWF  2F,F
....................    n |= input(LCD_DATA7) << 3; 
0081:  BSF    03.5
0082:  BSF    08.7
0083:  MOVLW  00
0084:  BCF    03.5
0085:  BTFSC  08.7
0086:  MOVLW  01
0087:  MOVWF  77
0088:  RLF    77,F
0089:  RLF    77,F
008A:  RLF    77,F
008B:  MOVLW  F8
008C:  ANDWF  77,F
008D:  MOVF   77,W
008E:  IORWF  2F,F
....................     
....................    return(n); 
008F:  MOVF   2F,W
0090:  MOVWF  78
....................   #else 
0091:  RETURN
....................    return(lcd.data); 
....................   #endif 
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
*
0031:  BTFSC  2E.0
0032:  GOTO   035
0033:  BCF    08.4
0034:  GOTO   036
0035:  BSF    08.4
0036:  BSF    03.5
0037:  BCF    08.4
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
0038:  BCF    03.5
0039:  BTFSC  2E.1
003A:  GOTO   03D
003B:  BCF    08.5
003C:  GOTO   03E
003D:  BSF    08.5
003E:  BSF    03.5
003F:  BCF    08.5
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
0040:  BCF    03.5
0041:  BTFSC  2E.2
0042:  GOTO   045
0043:  BCF    08.6
0044:  GOTO   046
0045:  BSF    08.6
0046:  BSF    03.5
0047:  BCF    08.6
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
0048:  BCF    03.5
0049:  BTFSC  2E.3
004A:  GOTO   04D
004B:  BCF    08.7
004C:  GOTO   04E
004D:  BSF    08.7
004E:  BSF    03.5
004F:  BCF    08.7
....................   #else       
....................    lcdlat.data = n; 
....................   #endif 
....................        
....................    delay_cycles(1); 
0050:  NOP
....................    lcd_output_enable(1); 
0051:  BCF    03.5
0052:  BSF    08.3
0053:  BSF    03.5
0054:  BCF    08.3
....................    delay_us(2); 
0055:  MOVLW  02
0056:  MOVWF  77
0057:  DECFSZ 77,F
0058:  GOTO   057
0059:  GOTO   05A
005A:  NOP
....................    lcd_output_enable(0); 
005B:  BCF    03.5
005C:  BCF    08.3
005D:  BSF    03.5
005E:  BCF    08.3
005F:  BCF    03.5
0060:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0092:  BSF    03.5
0093:  BCF    08.3
....................    lcd_rs_tris(); 
0094:  BCF    08.1
....................    lcd_rw_tris(); 
0095:  BCF    08.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0096:  BCF    03.5
0097:  BCF    08.1
0098:  BSF    03.5
0099:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
00CA:  MOVF   78,W
00CB:  MOVWF  2D
00CC:  BTFSS  2D.7
00CD:  GOTO   0D0
00CE:  BSF    03.5
00CF:  GOTO   09A
....................    lcd_output_rs(address); 
00D0:  MOVF   2B,F
00D1:  BTFSS  03.2
00D2:  GOTO   0D5
00D3:  BCF    08.1
00D4:  GOTO   0D6
00D5:  BSF    08.1
00D6:  BSF    03.5
00D7:  BCF    08.1
....................    delay_cycles(1); 
00D8:  NOP
....................    lcd_output_rw(0); 
00D9:  BCF    03.5
00DA:  BCF    08.2
00DB:  BSF    03.5
00DC:  BCF    08.2
....................    delay_cycles(1); 
00DD:  NOP
....................    lcd_output_enable(0); 
00DE:  BCF    03.5
00DF:  BCF    08.3
00E0:  BSF    03.5
00E1:  BCF    08.3
....................    lcd_send_nibble(n >> 4); 
00E2:  BCF    03.5
00E3:  SWAPF  2C,W
00E4:  MOVWF  2D
00E5:  MOVLW  0F
00E6:  ANDWF  2D,F
00E7:  MOVF   2D,W
00E8:  MOVWF  2E
00E9:  CALL   031
....................    lcd_send_nibble(n & 0xf); 
00EA:  MOVF   2C,W
00EB:  ANDLW  0F
00EC:  MOVWF  2D
00ED:  MOVWF  2E
00EE:  CALL   031
00EF:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
00F0:  MOVLW  28
00F1:  MOVWF  24
00F2:  MOVLW  0C
00F3:  MOVWF  25
00F4:  MOVLW  01
00F5:  MOVWF  26
00F6:  MOVLW  06
00F7:  MOVWF  27
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
00F8:  BCF    08.3
00F9:  BSF    03.5
00FA:  BCF    08.3
....................    lcd_output_rs(0); 
00FB:  BCF    03.5
00FC:  BCF    08.1
00FD:  BSF    03.5
00FE:  BCF    08.1
....................    lcd_output_rw(0); 
00FF:  BCF    03.5
0100:  BCF    08.2
0101:  BSF    03.5
0102:  BCF    08.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
0103:  BCF    08.4
....................    output_drive(LCD_DATA5); 
0104:  BCF    08.5
....................    output_drive(LCD_DATA6); 
0105:  BCF    08.6
....................    output_drive(LCD_DATA7); 
0106:  BCF    08.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................    lcd_enable_tris(); 
0107:  BCF    08.3
....................    lcd_rs_tris(); 
0108:  BCF    08.1
....................    lcd_rw_tris(); 
0109:  BCF    08.2
....................  #endif 
....................      
....................    delay_ms(15); 
010A:  MOVLW  0F
010B:  BCF    03.5
010C:  MOVWF  28
010D:  CALL   01D
....................    for(i=1;i<=3;++i) 
010E:  MOVLW  01
010F:  MOVWF  23
0110:  MOVF   23,W
0111:  SUBLW  03
0112:  BTFSS  03.0
0113:  GOTO   11C
....................    { 
....................        lcd_send_nibble(3); 
0114:  MOVLW  03
0115:  MOVWF  2E
0116:  CALL   031
....................        delay_ms(5); 
0117:  MOVLW  05
0118:  MOVWF  28
0119:  CALL   01D
011A:  INCF   23,F
011B:  GOTO   110
....................    } 
....................     
....................    lcd_send_nibble(2); 
011C:  MOVLW  02
011D:  MOVWF  2E
011E:  CALL   031
....................    delay_ms(5); 
011F:  MOVLW  05
0120:  MOVWF  28
0121:  CALL   01D
....................    for(i=0;i<=3;++i) 
0122:  CLRF   23
0123:  MOVF   23,W
0124:  SUBLW  03
0125:  BTFSS  03.0
0126:  GOTO   133
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
0127:  MOVLW  24
0128:  ADDWF  23,W
0129:  MOVWF  04
012A:  BCF    03.7
012B:  MOVF   00,W
012C:  MOVWF  28
012D:  CLRF   2B
012E:  MOVF   28,W
012F:  MOVWF  2C
0130:  CALL   092
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0131:  INCF   23,F
0132:  GOTO   123
0133:  BCF    0A.3
0134:  BCF    0A.4
0135:  GOTO   1ED (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
0136:  DECFSZ 28,W
0137:  GOTO   139
0138:  GOTO   13C
....................       address=LCD_LINE_TWO; 
0139:  MOVLW  40
013A:  MOVWF  29
013B:  GOTO   13D
....................    else 
....................       address=0; 
013C:  CLRF   29
....................       
....................    address+=x-1; 
013D:  MOVLW  01
013E:  SUBWF  27,W
013F:  ADDWF  29,F
....................    lcd_send_byte(0,0x80|address); 
0140:  MOVF   29,W
0141:  IORLW  80
0142:  MOVWF  2A
0143:  CLRF   2B
0144:  MOVF   2A,W
0145:  MOVWF  2C
0146:  CALL   092
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0147:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
0148:  MOVF   26,W
0149:  XORLW  07
014A:  BTFSC  03.2
014B:  GOTO   156
014C:  XORLW  0B
014D:  BTFSC  03.2
014E:  GOTO   15B
014F:  XORLW  06
0150:  BTFSC  03.2
0151:  GOTO   163
0152:  XORLW  02
0153:  BTFSC  03.2
0154:  GOTO   169
0155:  GOTO   16E
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
0156:  MOVLW  01
0157:  MOVWF  27
0158:  MOVWF  28
0159:  CALL   136
015A:  GOTO   173
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
015B:  CLRF   2B
015C:  MOVLW  01
015D:  MOVWF  2C
015E:  CALL   092
....................                      delay_ms(2); 
015F:  MOVLW  02
0160:  MOVWF  28
0161:  CALL   01D
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
0162:  GOTO   173
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
0163:  MOVLW  01
0164:  MOVWF  27
0165:  MOVLW  02
0166:  MOVWF  28
0167:  CALL   136
0168:  GOTO   173
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
0169:  CLRF   2B
016A:  MOVLW  10
016B:  MOVWF  2C
016C:  CALL   092
016D:  GOTO   173
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
016E:  MOVLW  01
016F:  MOVWF  2B
0170:  MOVF   26,W
0171:  MOVWF  2C
0172:  CALL   092
....................      #endif 
....................    } 
0173:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
.................... UNSIGNED INT8 LEVEL=0; 
.................... INT1 STATUS=0; //0 STOP 
....................                //1 RUN 
....................  
.................... VOID MAIN() 
*
01CA:  MOVF   03,W
01CB:  ANDLW  1F
01CC:  MOVWF  03
01CD:  CLRF   20
01CE:  BCF    21.0
01CF:  MOVLW  FF
01D0:  MOVWF  22
01D1:  BSF    03.5
01D2:  BSF    03.6
01D3:  MOVF   09,W
01D4:  ANDLW  C0
01D5:  MOVWF  09
01D6:  BCF    03.6
01D7:  BCF    1F.4
01D8:  BCF    1F.5
01D9:  MOVLW  00
01DA:  BSF    03.6
01DB:  MOVWF  08
01DC:  BCF    03.5
01DD:  CLRF   07
01DE:  CLRF   08
01DF:  CLRF   09
01E0:  BCF    03.7
.................... { 
....................    SET_TRIS_B(0XFF); 
01E1:  MOVLW  FF
01E2:  BSF    03.5
01E3:  BCF    03.6
01E4:  MOVWF  06
....................    SET_TRIS_C(0X00); 
01E5:  MOVLW  00
01E6:  MOVWF  07
01E7:  BCF    03.5
01E8:  MOVWF  22
....................    SET_TRIS_D(0X00); 
01E9:  BSF    03.5
01EA:  MOVWF  08
....................     
....................    //INSTALL LCD 
....................    LCD_INIT(); 
01EB:  BCF    03.5
01EC:  GOTO   0F0
....................     
....................    SETUP_TIMER_2(T2_DIV_BY_16,124,1);  //PR2=124 => MAXDUTY=(124+1)X4=500   
01ED:  MOVLW  00
01EE:  MOVWF  78
01EF:  IORLW  06
01F0:  MOVWF  12
01F1:  MOVLW  7C
01F2:  BSF    03.5
01F3:  MOVWF  12
....................                                        //3 CAP DO 30% 70% 100%        
....................    SETUP_CCP1(CCP_PWM); //RC2 
01F4:  BCF    03.5
01F5:  BCF    22.2
01F6:  MOVF   22,W
01F7:  BSF    03.5
01F8:  MOVWF  07
01F9:  BCF    03.5
01FA:  BCF    07.2
01FB:  MOVLW  0C
01FC:  MOVWF  17
01FD:  BSF    03.5
01FE:  CLRF   1B
01FF:  CLRF   1C
0200:  MOVLW  01
0201:  MOVWF  1D
....................    SET_TIMER2(0); 
0202:  BCF    03.5
0203:  CLRF   11
....................    SET_PWM1_DUTY(0); //BAN DAU DUNG DONG CO 
0204:  CLRF   15
....................    //HIEN THI LCD 
....................    LCD_GOTOXY(1,1); 
0205:  MOVWF  27
0206:  MOVWF  28
0207:  CALL   136
....................    LCD_PUTC("DUTY CYCLE"); 
0208:  MOVLW  04
0209:  BSF    03.6
020A:  MOVWF  0D
020B:  MOVLW  00
020C:  MOVWF  0F
020D:  BCF    03.6
020E:  CALL   174
....................    LCD_GOTOXY(1,2); 
020F:  MOVLW  01
0210:  MOVWF  27
0211:  MOVLW  02
0212:  MOVWF  28
0213:  CALL   136
....................    LCD_PUTC("STATUS"); 
0214:  MOVLW  0A
0215:  BSF    03.6
0216:  MOVWF  0D
0217:  MOVLW  00
0218:  MOVWF  0F
0219:  BCF    03.6
021A:  CALL   174
....................     
....................    WHILE(TRUE) 
....................    { 
....................     
....................       //KIEM TRA NUT NHAN SPEED 
....................       IF(INPUT(SPEED)==0) 
021B:  BSF    03.5
021C:  BSF    06.1
021D:  BCF    03.5
021E:  BTFSC  06.1
021F:  GOTO   22E
....................       { 
....................          DELAY_MS(10); 
0220:  MOVLW  0A
0221:  MOVWF  28
0222:  CALL   01D
....................          IF(INPUT(SPEED)==0) 
0223:  BSF    03.5
0224:  BSF    06.1
0225:  BCF    03.5
0226:  BTFSC  06.1
0227:  GOTO   22E
....................          { 
....................             LEVEL++; 
0228:  INCF   20,F
....................             WHILE(INPUT(SPEED)==0); 
0229:  BSF    03.5
022A:  BSF    06.1
022B:  BCF    03.5
022C:  BTFSS  06.1
022D:  GOTO   229
....................          } 
....................       } 
....................       IF(LEVEL>2)    LEVEL=0; 
022E:  MOVF   20,W
022F:  SUBLW  02
0230:  BTFSS  03.0
0231:  CLRF   20
....................       IF(LEVEL==0) 
0232:  MOVF   20,F
0233:  BTFSS  03.2
0234:  GOTO   241
....................       { 
....................          LCD_GOTOXY(12,1); 
0235:  MOVLW  0C
0236:  MOVWF  27
0237:  MOVLW  01
0238:  MOVWF  28
0239:  CALL   136
....................          LCD_PUTC("030%"); 
023A:  MOVLW  0E
023B:  BSF    03.6
023C:  MOVWF  0D
023D:  MOVLW  00
023E:  MOVWF  0F
023F:  BCF    03.6
0240:  CALL   174
....................       } 
....................       IF(LEVEL==1) 
0241:  DECFSZ 20,W
0242:  GOTO   24F
....................       { 
....................          LCD_GOTOXY(12,1); 
0243:  MOVLW  0C
0244:  MOVWF  27
0245:  MOVLW  01
0246:  MOVWF  28
0247:  CALL   136
....................          LCD_PUTC("070%"); 
0248:  MOVLW  11
0249:  BSF    03.6
024A:  MOVWF  0D
024B:  MOVLW  00
024C:  MOVWF  0F
024D:  BCF    03.6
024E:  CALL   174
....................       } 
....................       IF(LEVEL==2) 
024F:  MOVF   20,W
0250:  SUBLW  02
0251:  BTFSS  03.2
0252:  GOTO   25F
....................       { 
....................          LCD_GOTOXY(12,1); 
0253:  MOVLW  0C
0254:  MOVWF  27
0255:  MOVLW  01
0256:  MOVWF  28
0257:  CALL   136
....................          LCD_PUTC("100%"); 
0258:  MOVLW  14
0259:  BSF    03.6
025A:  MOVWF  0D
025B:  MOVLW  00
025C:  MOVWF  0F
025D:  BCF    03.6
025E:  CALL   174
....................       }             
....................        
....................       //KIEM TRA NUT NHAN RUN_STOP 
....................       IF(INPUT(RUN_STOP)==0) 
025F:  BSF    03.5
0260:  BSF    06.2
0261:  BCF    03.5
0262:  BTFSC  06.2
0263:  GOTO   273
....................       { 
....................          DELAY_MS(10); 
0264:  MOVLW  0A
0265:  MOVWF  28
0266:  CALL   01D
....................          IF(INPUT(RUN_STOP)==0) 
0267:  BSF    03.5
0268:  BSF    06.2
0269:  BCF    03.5
026A:  BTFSC  06.2
026B:  GOTO   273
....................          { 
....................             STATUS=~STATUS; 
026C:  MOVLW  01
026D:  XORWF  21,F
....................             WHILE(INPUT(RUN_STOP)==0); 
026E:  BSF    03.5
026F:  BSF    06.2
0270:  BCF    03.5
0271:  BTFSS  06.2
0272:  GOTO   26E
....................          } 
....................       } 
....................        
....................       //KIEM TRA RUN/STOP 
....................       IF(STATUS==0) 
0273:  BTFSC  21.0
0274:  GOTO   284
....................       { 
....................          //STOP 
....................          SETUP_CCP1(CCP_OFF); 
0275:  MOVLW  F0
0276:  ANDWF  17,F
....................          LCD_GOTOXY(12,2); 
0277:  MOVLW  0C
0278:  MOVWF  27
0279:  MOVLW  02
027A:  MOVWF  28
027B:  CALL   136
....................          LCD_PUTC("STOP"); 
027C:  MOVLW  17
027D:  BSF    03.6
027E:  MOVWF  0D
027F:  MOVLW  00
0280:  MOVWF  0F
0281:  BCF    03.6
0282:  CALL   174
....................       } 
0283:  GOTO   2B8
....................       ELSE 
....................       { 
....................          //RUN 
....................          LCD_GOTOXY(12,2); 
0284:  MOVLW  0C
0285:  MOVWF  27
0286:  MOVLW  02
0287:  MOVWF  28
0288:  CALL   136
....................          LCD_PUTC("RUN "); 
0289:  MOVLW  1A
028A:  BSF    03.6
028B:  MOVWF  0D
028C:  MOVLW  00
028D:  MOVWF  0F
028E:  BCF    03.6
028F:  CALL   174
....................          SETUP_CCP1(CCP_PWM); //SETUP LAI 
0290:  BCF    22.2
0291:  MOVF   22,W
0292:  BSF    03.5
0293:  MOVWF  07
0294:  BCF    03.5
0295:  BCF    07.2
0296:  MOVLW  0C
0297:  MOVWF  17
0298:  BSF    03.5
0299:  CLRF   1B
029A:  CLRF   1C
029B:  MOVLW  01
029C:  MOVWF  1D
....................          IF(LEVEL==0)   SET_PWM1_DUTY((UNSIGNED INT16)150); 
029D:  BCF    03.5
029E:  MOVF   20,F
029F:  BTFSS  03.2
02A0:  GOTO   2A7
02A1:  MOVLW  25
02A2:  MOVWF  15
02A3:  MOVF   17,W
02A4:  ANDLW  CF
02A5:  IORLW  20
02A6:  MOVWF  17
....................          IF(LEVEL==1)   SET_PWM1_DUTY((UNSIGNED INT16)350); 
02A7:  DECFSZ 20,W
02A8:  GOTO   2AF
02A9:  MOVLW  57
02AA:  MOVWF  15
02AB:  MOVF   17,W
02AC:  ANDLW  CF
02AD:  IORLW  20
02AE:  MOVWF  17
....................          IF(LEVEL==2)   SET_PWM1_DUTY((UNSIGNED INT16)500);              
02AF:  MOVF   20,W
02B0:  SUBLW  02
02B1:  BTFSS  03.2
02B2:  GOTO   2B8
02B3:  MOVLW  7D
02B4:  MOVWF  15
02B5:  MOVF   17,W
02B6:  ANDLW  CF
02B7:  MOVWF  17
....................       } 
02B8:  GOTO   21B
....................    } 
....................     
.................... } 
....................  
02B9:  SLEEP

Configuration Fuses:
   Word  1: 2FE2   HS NOWDT PUT MCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
