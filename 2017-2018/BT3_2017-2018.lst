CCS PCM C Compiler, Version 5.015, 5967               14-Dec-23 01:48

               Filename:   E:\BAI TAP VXL\DETHI-GIAIDETHI\2017-2018\BT3_2017-2018.lst

               ROM used:   910 words (11%)
                           Largest free fragment is 2048
               RAM used:   10 (3%) at main() level
                           29 (8%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  02
0001:  MOVWF  0A
0002:  GOTO   2CF
0003:  NOP
.................... #INCLUDE<16F887.H> 
.................... //////////// Standard Header file for the PIC16F887 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F887 
0004:  DATA 53,2A
0005:  DATA 4F,28
0006:  DATA 00,00
0007:  DATA C6,2A
0008:  DATA 4C,26
0009:  DATA 00,01
000A:  DATA D2,2A
000B:  DATA 4E,10
000C:  DATA 20,00
000D:  DATA 53,2A
000E:  DATA 4F,28
000F:  DATA 20,00
0010:  DATA D2,22
0011:  DATA D3,22
0012:  DATA 54,00
0013:  DATA C2,37
0014:  DATA F8,1E
0015:  DATA 25,18
0016:  DATA 35,26
0017:  DATA 55,00
*
016F:  MOVF   0B,W
0170:  MOVWF  24
0171:  BCF    0B.7
0172:  BSF    03.5
0173:  BSF    03.6
0174:  BSF    0C.7
0175:  BSF    0C.0
0176:  NOP
0177:  NOP
0178:  BCF    03.5
0179:  BCF    03.6
017A:  BTFSC  24.7
017B:  BSF    0B.7
017C:  BSF    03.6
017D:  MOVF   0C,W
017E:  ANDLW  7F
017F:  BTFSC  03.2
0180:  GOTO   1C3
0181:  BCF    03.6
0182:  MOVWF  24
0183:  BSF    03.6
0184:  MOVF   0D,W
0185:  BCF    03.6
0186:  MOVWF  25
0187:  BSF    03.6
0188:  MOVF   0F,W
0189:  BCF    03.6
018A:  MOVWF  26
018B:  MOVF   24,W
018C:  MOVWF  2D
018D:  CALL   143
018E:  MOVF   25,W
018F:  BSF    03.6
0190:  MOVWF  0D
0191:  BCF    03.6
0192:  MOVF   26,W
0193:  BSF    03.6
0194:  MOVWF  0F
0195:  BCF    03.6
0196:  MOVF   0B,W
0197:  MOVWF  27
0198:  BCF    0B.7
0199:  BSF    03.5
019A:  BSF    03.6
019B:  BSF    0C.7
019C:  BSF    0C.0
019D:  NOP
019E:  NOP
019F:  BCF    03.5
01A0:  BCF    03.6
01A1:  BTFSC  27.7
01A2:  BSF    0B.7
01A3:  BSF    03.6
01A4:  RLF    0C,W
01A5:  RLF    0E,W
01A6:  ANDLW  7F
01A7:  BTFSC  03.2
01A8:  GOTO   1C3
01A9:  BCF    03.6
01AA:  MOVWF  24
01AB:  BSF    03.6
01AC:  MOVF   0D,W
01AD:  BCF    03.6
01AE:  MOVWF  25
01AF:  BSF    03.6
01B0:  MOVF   0F,W
01B1:  BCF    03.6
01B2:  MOVWF  26
01B3:  MOVF   24,W
01B4:  MOVWF  2D
01B5:  CALL   143
01B6:  MOVF   25,W
01B7:  BSF    03.6
01B8:  MOVWF  0D
01B9:  BCF    03.6
01BA:  MOVF   26,W
01BB:  BSF    03.6
01BC:  MOVWF  0F
01BD:  INCF   0D,F
01BE:  BTFSC  03.2
01BF:  INCF   0F,F
01C0:  BCF    03.6
01C1:  GOTO   16F
01C2:  BSF    03.6
01C3:  BCF    03.6
01C4:  RETURN
01C5:  MOVF   27,W
01C6:  CLRF   78
01C7:  SUBWF  26,W
01C8:  BTFSC  03.0
01C9:  GOTO   1CD
01CA:  MOVF   26,W
01CB:  MOVWF  77
01CC:  GOTO   1D9
01CD:  CLRF   77
01CE:  MOVLW  08
01CF:  MOVWF  28
01D0:  RLF    26,F
01D1:  RLF    77,F
01D2:  MOVF   27,W
01D3:  SUBWF  77,W
01D4:  BTFSC  03.0
01D5:  MOVWF  77
01D6:  RLF    78,F
01D7:  DECFSZ 28,F
01D8:  GOTO   1D0
01D9:  RETURN
01DA:  MOVF   78,W
01DB:  MOVF   24,W
01DC:  MOVWF  26
01DD:  MOVLW  64
01DE:  MOVWF  27
01DF:  CALL   1C5
01E0:  MOVF   77,W
01E1:  MOVWF  24
01E2:  MOVF   78,W
01E3:  MOVLW  30
01E4:  BTFSS  03.2
01E5:  GOTO   1ED
01E6:  BTFSS  25.1
01E7:  GOTO   1F4
01E8:  BTFSC  25.3
01E9:  GOTO   1F4
01EA:  BTFSC  25.4
01EB:  MOVLW  20
01EC:  GOTO   1F0
01ED:  BCF    25.3
01EE:  BCF    25.4
01EF:  BSF    25.0
01F0:  ADDWF  78,F
01F1:  MOVF   78,W
01F2:  MOVWF  2D
01F3:  CALL   143
01F4:  MOVF   24,W
01F5:  MOVWF  26
01F6:  MOVLW  0A
01F7:  MOVWF  27
01F8:  CALL   1C5
01F9:  MOVF   77,W
01FA:  MOVWF  24
01FB:  MOVF   78,W
01FC:  MOVLW  30
01FD:  BTFSS  03.2
01FE:  GOTO   205
01FF:  BTFSC  25.3
0200:  GOTO   209
0201:  BTFSS  25.0
0202:  GOTO   209
0203:  BTFSC  25.4
0204:  MOVLW  20
0205:  ADDWF  78,F
0206:  MOVF   78,W
0207:  MOVWF  2D
0208:  CALL   143
0209:  MOVLW  30
020A:  ADDWF  24,F
020B:  MOVF   24,W
020C:  MOVWF  2D
020D:  CALL   143
020E:  BCF    0A.3
020F:  BCF    0A.4
0210:  GOTO   376 (RETURN)
0211:  MOVF   0B,W
0212:  MOVWF  25
0213:  BCF    0B.7
0214:  BSF    03.5
0215:  BSF    03.6
0216:  BSF    0C.7
0217:  BSF    0C.0
0218:  NOP
0219:  NOP
021A:  BCF    03.5
021B:  BCF    03.6
021C:  BTFSC  25.7
021D:  BSF    0B.7
021E:  BTFSC  03.0
021F:  GOTO   248
0220:  BSF    03.6
0221:  MOVF   0C,W
0222:  ANDLW  7F
0223:  BCF    03.6
0224:  MOVWF  25
0225:  BSF    03.6
0226:  MOVF   0D,W
0227:  BCF    03.6
0228:  MOVWF  26
0229:  BSF    03.6
022A:  MOVF   0F,W
022B:  BCF    03.6
022C:  MOVWF  27
022D:  MOVF   25,W
022E:  MOVWF  2D
022F:  CALL   143
0230:  MOVF   26,W
0231:  BSF    03.6
0232:  MOVWF  0D
0233:  BCF    03.6
0234:  MOVF   27,W
0235:  BSF    03.6
0236:  MOVWF  0F
0237:  BCF    03.6
0238:  MOVF   0B,W
0239:  MOVWF  28
023A:  BCF    0B.7
023B:  BSF    03.5
023C:  BSF    03.6
023D:  BSF    0C.7
023E:  BSF    0C.0
023F:  NOP
0240:  NOP
0241:  BCF    03.5
0242:  BCF    03.6
0243:  BTFSC  28.7
0244:  BSF    0B.7
0245:  DECFSZ 24,F
0246:  GOTO   248
0247:  GOTO   267
0248:  BSF    03.6
0249:  RLF    0C,W
024A:  RLF    0E,W
024B:  ANDLW  7F
024C:  BCF    03.6
024D:  MOVWF  25
024E:  BSF    03.6
024F:  MOVF   0D,W
0250:  BCF    03.6
0251:  MOVWF  26
0252:  BSF    03.6
0253:  MOVF   0F,W
0254:  BCF    03.6
0255:  MOVWF  27
0256:  MOVF   25,W
0257:  MOVWF  2D
0258:  CALL   143
0259:  MOVF   26,W
025A:  BSF    03.6
025B:  MOVWF  0D
025C:  BCF    03.6
025D:  MOVF   27,W
025E:  BSF    03.6
025F:  MOVWF  0F
0260:  INCF   0D,F
0261:  BTFSC  03.2
0262:  INCF   0F,F
0263:  BCF    03.0
0264:  BCF    03.6
0265:  DECFSZ 24,F
0266:  GOTO   211
0267:  BCF    0A.3
0268:  BCF    0A.4
0269:  GOTO   385 (RETURN)
026A:  CLRF   2C
026B:  MOVF   04,W
026C:  MOVWF  2B
026D:  BCF    2C.0
026E:  BTFSC  03.7
026F:  BSF    2C.0
0270:  SWAPF  25,W
0271:  IORLW  F0
0272:  MOVWF  27
0273:  ADDWF  27,F
0274:  ADDLW  E2
0275:  MOVWF  28
0276:  ADDLW  32
0277:  MOVWF  2A
0278:  MOVF   25,W
0279:  ANDLW  0F
027A:  ADDWF  28,F
027B:  ADDWF  28,F
027C:  ADDWF  2A,F
027D:  ADDLW  E9
027E:  MOVWF  29
027F:  ADDWF  29,F
0280:  ADDWF  29,F
0281:  SWAPF  24,W
0282:  ANDLW  0F
0283:  ADDWF  29,F
0284:  ADDWF  2A,F
0285:  RLF    29,F
0286:  RLF    2A,F
0287:  COMF   2A,F
0288:  RLF    2A,F
0289:  MOVF   24,W
028A:  ANDLW  0F
028B:  ADDWF  2A,F
028C:  RLF    27,F
028D:  MOVLW  07
028E:  MOVWF  26
028F:  MOVLW  0A
0290:  ADDWF  2A,F
0291:  DECF   29,F
0292:  BTFSS  03.0
0293:  GOTO   290
0294:  ADDWF  29,F
0295:  DECF   28,F
0296:  BTFSS  03.0
0297:  GOTO   294
0298:  ADDWF  28,F
0299:  DECF   27,F
029A:  BTFSS  03.0
029B:  GOTO   298
029C:  ADDWF  27,F
029D:  DECF   26,F
029E:  BTFSS  03.0
029F:  GOTO   29C
02A0:  MOVLW  26
02A1:  MOVWF  04
02A2:  BCF    03.7
02A3:  MOVLW  07
02A4:  ANDWF  2B,W
02A5:  BCF    2B.6
02A6:  ADDWF  04,F
02A7:  MOVLW  2A
02A8:  SUBWF  04,W
02A9:  BTFSC  03.2
02AA:  BSF    2B.6
02AB:  MOVF   00,W
02AC:  MOVWF  77
02AD:  BTFSS  03.2
02AE:  GOTO   2B7
02AF:  BTFSC  2B.6
02B0:  GOTO   2B7
02B1:  BTFSC  2B.4
02B2:  GOTO   2C9
02B3:  BTFSC  2B.3
02B4:  GOTO   2B7
02B5:  MOVLW  20
02B6:  GOTO   2BA
02B7:  BSF    2B.3
02B8:  BCF    2B.4
02B9:  MOVLW  30
02BA:  ADDWF  77,F
02BB:  CLRF   25
02BC:  MOVF   04,W
02BD:  MOVWF  24
02BE:  BCF    25.0
02BF:  BTFSC  03.7
02C0:  BSF    25.0
02C1:  MOVF   77,W
02C2:  MOVWF  2D
02C3:  CALL   143
02C4:  MOVF   24,W
02C5:  MOVWF  04
02C6:  BCF    03.7
02C7:  BTFSC  25.0
02C8:  BSF    03.7
02C9:  INCF   04,F
02CA:  BTFSS  2B.6
02CB:  GOTO   2A7
02CC:  BCF    0A.3
02CD:  BCF    0A.4
02CE:  GOTO   38C (RETURN)
....................  
.................... #list 
....................  
.................... #FUSES HS 
.................... #USE DELAY(CLOCK=20M) 
*
0018:  MOVLW  2E
0019:  MOVWF  04
001A:  BCF    03.7
001B:  MOVF   00,W
001C:  BTFSC  03.2
001D:  GOTO   02B
001E:  MOVLW  06
001F:  MOVWF  78
0020:  CLRF   77
0021:  DECFSZ 77,F
0022:  GOTO   021
0023:  DECFSZ 78,F
0024:  GOTO   020
0025:  MOVLW  7B
0026:  MOVWF  77
0027:  DECFSZ 77,F
0028:  GOTO   027
0029:  DECFSZ 00,F
002A:  GOTO   01E
002B:  RETURN
....................  
.................... #DEFINE RUN PIN_B0 
.................... #DEFINE STOP PIN_B1 
.................... // NUT RESET NOI MCLR -> KHONG CAN PHAI DINH NGHIA 
.................... //                       KHONG PHAI DOC INPUT 
.................... //                       KHONG CAN CHONG DOI 
.................... // KHI NHAN CHUONG TRINH CHAY LAI TU DAU 
....................  
.................... #define LCD_ENABLE_PIN  PIN_D3                                     
.................... #define LCD_RS_PIN      PIN_D1                                    
.................... #define LCD_RW_PIN      PIN_D2                                     
.................... #define LCD_DATA4       PIN_D4                                     
.................... #define LCD_DATA5       PIN_D5                                    
.................... #define LCD_DATA6       PIN_D6                                     
.................... #define LCD_DATA7       PIN_D7 
....................  
.................... #INCLUDE<LCD.C> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
*
0095:  BSF    08.4
....................    output_float(LCD_DATA5); 
0096:  BSF    08.5
....................    output_float(LCD_DATA6); 
0097:  BSF    08.6
....................    output_float(LCD_DATA7); 
0098:  BSF    08.7
....................   #else 
....................    lcdtris.data = 0xF; 
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
0099:  BCF    03.5
009A:  BSF    08.2
009B:  BSF    03.5
009C:  BCF    08.2
....................    delay_cycles(1); 
009D:  NOP
....................    lcd_output_enable(1); 
009E:  BCF    03.5
009F:  BSF    08.3
00A0:  BSF    03.5
00A1:  BCF    08.3
....................    delay_cycles(1); 
00A2:  NOP
....................    high = lcd_read_nibble(); 
00A3:  BCF    03.5
00A4:  CALL   05C
00A5:  MOVF   78,W
00A6:  MOVWF  35
....................        
....................    lcd_output_enable(0); 
00A7:  BCF    08.3
00A8:  BSF    03.5
00A9:  BCF    08.3
....................    delay_cycles(1); 
00AA:  NOP
....................    lcd_output_enable(1); 
00AB:  BCF    03.5
00AC:  BSF    08.3
00AD:  BSF    03.5
00AE:  BCF    08.3
....................    delay_us(1); 
00AF:  GOTO   0B0
00B0:  GOTO   0B1
00B1:  NOP
....................    low = lcd_read_nibble(); 
00B2:  BCF    03.5
00B3:  CALL   05C
00B4:  MOVF   78,W
00B5:  MOVWF  34
....................        
....................    lcd_output_enable(0); 
00B6:  BCF    08.3
00B7:  BSF    03.5
00B8:  BCF    08.3
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
00B9:  BCF    08.4
....................    output_drive(LCD_DATA5); 
00BA:  BCF    08.5
....................    output_drive(LCD_DATA6); 
00BB:  BCF    08.6
....................    output_drive(LCD_DATA7); 
00BC:  BCF    08.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
00BD:  BCF    03.5
00BE:  SWAPF  35,W
00BF:  MOVWF  77
00C0:  MOVLW  F0
00C1:  ANDWF  77,F
00C2:  MOVF   77,W
00C3:  IORWF  34,W
00C4:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
*
005C:  CLRF   36
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
005D:  BSF    03.5
005E:  BSF    08.4
005F:  MOVLW  00
0060:  BCF    03.5
0061:  BTFSC  08.4
0062:  MOVLW  01
0063:  IORWF  36,F
....................    n |= input(LCD_DATA5) << 1; 
0064:  BSF    03.5
0065:  BSF    08.5
0066:  MOVLW  00
0067:  BCF    03.5
0068:  BTFSC  08.5
0069:  MOVLW  01
006A:  MOVWF  77
006B:  BCF    03.0
006C:  RLF    77,F
006D:  MOVF   77,W
006E:  IORWF  36,F
....................    n |= input(LCD_DATA6) << 2; 
006F:  BSF    03.5
0070:  BSF    08.6
0071:  MOVLW  00
0072:  BCF    03.5
0073:  BTFSC  08.6
0074:  MOVLW  01
0075:  MOVWF  77
0076:  RLF    77,F
0077:  RLF    77,F
0078:  MOVLW  FC
0079:  ANDWF  77,F
007A:  MOVF   77,W
007B:  IORWF  36,F
....................    n |= input(LCD_DATA7) << 3; 
007C:  BSF    03.5
007D:  BSF    08.7
007E:  MOVLW  00
007F:  BCF    03.5
0080:  BTFSC  08.7
0081:  MOVLW  01
0082:  MOVWF  77
0083:  RLF    77,F
0084:  RLF    77,F
0085:  RLF    77,F
0086:  MOVLW  F8
0087:  ANDWF  77,F
0088:  MOVF   77,W
0089:  IORWF  36,F
....................     
....................    return(n); 
008A:  MOVF   36,W
008B:  MOVWF  78
....................   #else 
008C:  RETURN
....................    return(lcd.data); 
....................   #endif 
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
*
002C:  BTFSC  35.0
002D:  GOTO   030
002E:  BCF    08.4
002F:  GOTO   031
0030:  BSF    08.4
0031:  BSF    03.5
0032:  BCF    08.4
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
0033:  BCF    03.5
0034:  BTFSC  35.1
0035:  GOTO   038
0036:  BCF    08.5
0037:  GOTO   039
0038:  BSF    08.5
0039:  BSF    03.5
003A:  BCF    08.5
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
003B:  BCF    03.5
003C:  BTFSC  35.2
003D:  GOTO   040
003E:  BCF    08.6
003F:  GOTO   041
0040:  BSF    08.6
0041:  BSF    03.5
0042:  BCF    08.6
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
0043:  BCF    03.5
0044:  BTFSC  35.3
0045:  GOTO   048
0046:  BCF    08.7
0047:  GOTO   049
0048:  BSF    08.7
0049:  BSF    03.5
004A:  BCF    08.7
....................   #else       
....................    lcdlat.data = n; 
....................   #endif 
....................        
....................    delay_cycles(1); 
004B:  NOP
....................    lcd_output_enable(1); 
004C:  BCF    03.5
004D:  BSF    08.3
004E:  BSF    03.5
004F:  BCF    08.3
....................    delay_us(2); 
0050:  MOVLW  02
0051:  MOVWF  77
0052:  DECFSZ 77,F
0053:  GOTO   052
0054:  GOTO   055
0055:  NOP
....................    lcd_output_enable(0); 
0056:  BCF    03.5
0057:  BCF    08.3
0058:  BSF    03.5
0059:  BCF    08.3
005A:  BCF    03.5
005B:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
008D:  BSF    03.5
008E:  BCF    08.3
....................    lcd_rs_tris(); 
008F:  BCF    08.1
....................    lcd_rw_tris(); 
0090:  BCF    08.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0091:  BCF    03.5
0092:  BCF    08.1
0093:  BSF    03.5
0094:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
00C5:  MOVF   78,W
00C6:  MOVWF  34
00C7:  BTFSS  34.7
00C8:  GOTO   0CB
00C9:  BSF    03.5
00CA:  GOTO   095
....................    lcd_output_rs(address); 
00CB:  MOVF   32,F
00CC:  BTFSS  03.2
00CD:  GOTO   0D0
00CE:  BCF    08.1
00CF:  GOTO   0D1
00D0:  BSF    08.1
00D1:  BSF    03.5
00D2:  BCF    08.1
....................    delay_cycles(1); 
00D3:  NOP
....................    lcd_output_rw(0); 
00D4:  BCF    03.5
00D5:  BCF    08.2
00D6:  BSF    03.5
00D7:  BCF    08.2
....................    delay_cycles(1); 
00D8:  NOP
....................    lcd_output_enable(0); 
00D9:  BCF    03.5
00DA:  BCF    08.3
00DB:  BSF    03.5
00DC:  BCF    08.3
....................    lcd_send_nibble(n >> 4); 
00DD:  BCF    03.5
00DE:  SWAPF  33,W
00DF:  MOVWF  34
00E0:  MOVLW  0F
00E1:  ANDWF  34,F
00E2:  MOVF   34,W
00E3:  MOVWF  35
00E4:  CALL   02C
....................    lcd_send_nibble(n & 0xf); 
00E5:  MOVF   33,W
00E6:  ANDLW  0F
00E7:  MOVWF  34
00E8:  MOVWF  35
00E9:  CALL   02C
00EA:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
00EB:  MOVLW  28
00EC:  MOVWF  25
00ED:  MOVLW  0C
00EE:  MOVWF  26
00EF:  MOVLW  01
00F0:  MOVWF  27
00F1:  MOVLW  06
00F2:  MOVWF  28
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
00F3:  BCF    08.3
00F4:  BSF    03.5
00F5:  BCF    08.3
....................    lcd_output_rs(0); 
00F6:  BCF    03.5
00F7:  BCF    08.1
00F8:  BSF    03.5
00F9:  BCF    08.1
....................    lcd_output_rw(0); 
00FA:  BCF    03.5
00FB:  BCF    08.2
00FC:  BSF    03.5
00FD:  BCF    08.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
00FE:  BCF    08.4
....................    output_drive(LCD_DATA5); 
00FF:  BCF    08.5
....................    output_drive(LCD_DATA6); 
0100:  BCF    08.6
....................    output_drive(LCD_DATA7); 
0101:  BCF    08.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................    lcd_enable_tris(); 
0102:  BCF    08.3
....................    lcd_rs_tris(); 
0103:  BCF    08.1
....................    lcd_rw_tris(); 
0104:  BCF    08.2
....................  #endif 
....................      
....................    delay_ms(15); 
0105:  MOVLW  0F
0106:  BCF    03.5
0107:  MOVWF  2E
0108:  CALL   018
....................    for(i=1;i<=3;++i) 
0109:  MOVLW  01
010A:  MOVWF  24
010B:  MOVF   24,W
010C:  SUBLW  03
010D:  BTFSS  03.0
010E:  GOTO   117
....................    { 
....................        lcd_send_nibble(3); 
010F:  MOVLW  03
0110:  MOVWF  35
0111:  CALL   02C
....................        delay_ms(5); 
0112:  MOVLW  05
0113:  MOVWF  2E
0114:  CALL   018
0115:  INCF   24,F
0116:  GOTO   10B
....................    } 
....................     
....................    lcd_send_nibble(2); 
0117:  MOVLW  02
0118:  MOVWF  35
0119:  CALL   02C
....................    delay_ms(5); 
011A:  MOVLW  05
011B:  MOVWF  2E
011C:  CALL   018
....................    for(i=0;i<=3;++i) 
011D:  CLRF   24
011E:  MOVF   24,W
011F:  SUBLW  03
0120:  BTFSS  03.0
0121:  GOTO   12E
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
0122:  MOVLW  25
0123:  ADDWF  24,W
0124:  MOVWF  04
0125:  BCF    03.7
0126:  MOVF   00,W
0127:  MOVWF  29
0128:  CLRF   32
0129:  MOVF   29,W
012A:  MOVWF  33
012B:  CALL   08D
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
012C:  INCF   24,F
012D:  GOTO   11E
012E:  BCF    0A.3
012F:  BCF    0A.4
0130:  GOTO   2EE (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
0131:  DECFSZ 2F,W
0132:  GOTO   134
0133:  GOTO   137
....................       address=LCD_LINE_TWO; 
0134:  MOVLW  40
0135:  MOVWF  30
0136:  GOTO   138
....................    else 
....................       address=0; 
0137:  CLRF   30
....................       
....................    address+=x-1; 
0138:  MOVLW  01
0139:  SUBWF  2E,W
013A:  ADDWF  30,F
....................    lcd_send_byte(0,0x80|address); 
013B:  MOVF   30,W
013C:  IORLW  80
013D:  MOVWF  31
013E:  CLRF   32
013F:  MOVF   31,W
0140:  MOVWF  33
0141:  CALL   08D
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0142:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
0143:  MOVF   2D,W
0144:  XORLW  07
0145:  BTFSC  03.2
0146:  GOTO   151
0147:  XORLW  0B
0148:  BTFSC  03.2
0149:  GOTO   156
014A:  XORLW  06
014B:  BTFSC  03.2
014C:  GOTO   15E
014D:  XORLW  02
014E:  BTFSC  03.2
014F:  GOTO   164
0150:  GOTO   169
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
0151:  MOVLW  01
0152:  MOVWF  2E
0153:  MOVWF  2F
0154:  CALL   131
0155:  GOTO   16E
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
0156:  CLRF   32
0157:  MOVLW  01
0158:  MOVWF  33
0159:  CALL   08D
....................                      delay_ms(2); 
015A:  MOVLW  02
015B:  MOVWF  2E
015C:  CALL   018
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
015D:  GOTO   16E
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
015E:  MOVLW  01
015F:  MOVWF  2E
0160:  MOVLW  02
0161:  MOVWF  2F
0162:  CALL   131
0163:  GOTO   16E
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
0164:  CLRF   32
0165:  MOVLW  10
0166:  MOVWF  33
0167:  CALL   08D
0168:  GOTO   16E
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
0169:  MOVLW  01
016A:  MOVWF  32
016B:  MOVF   2D,W
016C:  MOVWF  33
016D:  CALL   08D
....................      #endif 
....................    } 
016E:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
.................... UNSIGNED INT8 PRODUCT=0; //BAN DAU 
.................... UNSIGNED INT16 BOX=0; //BAN DAU 
.................... UNSIGNED INT8 MODE = 0; //BAN DAU LA TRANG THAI RESET GIONG LUC MOI CAP DIEN 
.................... //RUN    -> MODE 1 
.................... //STOP   -> MODE 2 
.................... //RESET  -> MODE 0 
....................  
.................... VOID MAIN() 
*
02CF:  MOVF   03,W
02D0:  ANDLW  1F
02D1:  MOVWF  03
02D2:  CLRF   20
02D3:  CLRF   22
02D4:  CLRF   21
02D5:  CLRF   23
02D6:  BSF    03.5
02D7:  BSF    03.6
02D8:  MOVF   09,W
02D9:  ANDLW  C0
02DA:  MOVWF  09
02DB:  BCF    03.6
02DC:  BCF    1F.4
02DD:  BCF    1F.5
02DE:  MOVLW  00
02DF:  BSF    03.6
02E0:  MOVWF  08
02E1:  BCF    03.5
02E2:  CLRF   07
02E3:  CLRF   08
02E4:  CLRF   09
02E5:  BCF    03.7
.................... { 
....................    SET_TRIS_B(0XFF); 
02E6:  MOVLW  FF
02E7:  BSF    03.5
02E8:  BCF    03.6
02E9:  MOVWF  06
....................    SET_TRIS_D(0X00); 
02EA:  MOVLW  00
02EB:  MOVWF  08
....................    //INSTALL LCD 
....................    LCD_INIT(); 
02EC:  BCF    03.5
02ED:  GOTO   0EB
....................    //SETUP COUNTER 
....................    SETUP_TIMER_1(T1_EXTERNAL|T1_DIV_BY_1); 
02EE:  MOVLW  07
02EF:  MOVWF  10
....................    SET_TIMER1(0); 
02F0:  CLRF   0E
02F1:  CLRF   0F
02F2:  CLRF   0E
....................     
....................    WHILE(TRUE) 
....................    { 
....................       IF(INPUT(RUN)==0)    MODE=1; 
02F3:  BSF    03.5
02F4:  BSF    06.0
02F5:  BCF    03.5
02F6:  BTFSC  06.0
02F7:  GOTO   2FA
02F8:  MOVLW  01
02F9:  MOVWF  23
....................       IF(INPUT(STOP)==0)   MODE=2; 
02FA:  BSF    03.5
02FB:  BSF    06.1
02FC:  BCF    03.5
02FD:  BTFSC  06.1
02FE:  GOTO   301
02FF:  MOVLW  02
0300:  MOVWF  23
....................        
....................       PRODUCT=GET_TIMER1(); 
0301:  MOVF   0F,W
0302:  MOVWF  7A
0303:  MOVF   0E,W
0304:  MOVWF  77
0305:  MOVF   0F,W
0306:  SUBWF  7A,W
0307:  BTFSS  03.2
0308:  GOTO   301
0309:  MOVF   77,W
030A:  MOVWF  20
....................       IF(PRODUCT==50) 
030B:  MOVF   20,W
030C:  SUBLW  32
030D:  BTFSS  03.2
030E:  GOTO   315
....................       { 
....................          BOX++; 
030F:  INCF   21,F
0310:  BTFSC  03.2
0311:  INCF   22,F
....................          SET_TIMER1(0); 
0312:  CLRF   0E
0313:  CLRF   0F
0314:  CLRF   0E
....................       } 
....................       IF(BOX==50000) 
0315:  MOVF   21,W
0316:  SUBLW  50
0317:  BTFSS  03.2
0318:  GOTO   336
0319:  MOVF   22,W
031A:  SUBLW  C3
031B:  BTFSS  03.2
031C:  GOTO   336
....................       { 
....................          SETUP_TIMER_1(T1_DISABLED); 
031D:  CLRF   10
....................          LCD_GOTOXY(12,1); 
031E:  MOVLW  0C
031F:  MOVWF  2E
0320:  MOVLW  01
0321:  MOVWF  2F
0322:  CALL   131
....................          LCD_PUTC("STOP"); 
0323:  MOVLW  04
0324:  BSF    03.6
0325:  MOVWF  0D
0326:  MOVLW  00
0327:  MOVWF  0F
0328:  BCF    03.6
0329:  CALL   16F
....................          LCD_GOTOXY(12,2); 
032A:  MOVLW  0C
032B:  MOVWF  2E
032C:  MOVLW  02
032D:  MOVWF  2F
032E:  CALL   131
....................          LCD_PUTC("FULL"); 
032F:  MOVLW  07
0330:  BSF    03.6
0331:  MOVWF  0D
0332:  MOVLW  00
0333:  MOVWF  0F
0334:  BCF    03.6
0335:  CALL   16F
....................       } 
....................       //XU LY BIEN MODE 
....................       IF(MODE==1) //RUN 
0336:  DECFSZ 23,W
0337:  GOTO   346
....................       { 
....................          SETUP_TIMER_1(T1_EXTERNAL|T1_DIV_BY_1);   //SETUP LAI BO DEM COUTER 
0338:  MOVLW  07
0339:  MOVWF  10
....................          LCD_GOTOXY(12,1); 
033A:  MOVLW  0C
033B:  MOVWF  2E
033C:  MOVLW  01
033D:  MOVWF  2F
033E:  CALL   131
....................          LCD_PUTC("RUN  "); 
033F:  MOVLW  0A
0340:  BSF    03.6
0341:  MOVWF  0D
0342:  MOVLW  00
0343:  MOVWF  0F
0344:  BCF    03.6
0345:  CALL   16F
....................       } 
....................       IF(MODE==2) //STOP 
0346:  MOVF   23,W
0347:  SUBLW  02
0348:  BTFSS  03.2
0349:  GOTO   357
....................       { 
....................          SETUP_TIMER_1(T1_DISABLED);   //TAT COUNTER 
034A:  CLRF   10
....................          LCD_GOTOXY(12,1); 
034B:  MOVLW  0C
034C:  MOVWF  2E
034D:  MOVLW  01
034E:  MOVWF  2F
034F:  CALL   131
....................          LCD_PUTC("STOP "); 
0350:  MOVLW  0D
0351:  BSF    03.6
0352:  MOVWF  0D
0353:  MOVLW  00
0354:  MOVWF  0F
0355:  BCF    03.6
0356:  CALL   16F
....................       } 
....................       IF(MODE==0) //RESET 
0357:  MOVF   23,F
0358:  BTFSS  03.2
0359:  GOTO   367
....................       { 
....................          SETUP_TIMER_1(T1_DISABLED);   //TAT COUNTER 
035A:  CLRF   10
....................          LCD_GOTOXY(12,1); 
035B:  MOVLW  0C
035C:  MOVWF  2E
035D:  MOVLW  01
035E:  MOVWF  2F
035F:  CALL   131
....................          LCD_PUTC("RESET"); 
0360:  MOVLW  10
0361:  BSF    03.6
0362:  MOVWF  0D
0363:  MOVLW  00
0364:  MOVWF  0F
0365:  BCF    03.6
0366:  CALL   16F
....................       } 
....................        
....................       // HIEN THI LEN LCD 
....................       LCD_GOTOXY(1,1); 
0367:  MOVLW  01
0368:  MOVWF  2E
0369:  MOVWF  2F
036A:  CALL   131
....................       PRINTF(LCD_PUTC,"P=%02U",PRODUCT); 
036B:  MOVLW  50
036C:  MOVWF  2D
036D:  CALL   143
036E:  MOVLW  3D
036F:  MOVWF  2D
0370:  CALL   143
0371:  MOVF   20,W
0372:  MOVWF  24
0373:  MOVLW  01
0374:  MOVWF  25
0375:  GOTO   1DA
....................       LCD_GOTOXY(1,2); 
0376:  MOVLW  01
0377:  MOVWF  2E
0378:  MOVLW  02
0379:  MOVWF  2F
037A:  CALL   131
....................       PRINTF(LCD_PUTC,"Box=%05LU",BOX);     
037B:  MOVLW  13
037C:  BSF    03.6
037D:  MOVWF  0D
037E:  MOVLW  00
037F:  MOVWF  0F
0380:  BCF    03.0
0381:  MOVLW  04
0382:  BCF    03.6
0383:  MOVWF  24
0384:  GOTO   211
0385:  MOVLW  08
0386:  MOVWF  04
0387:  MOVF   22,W
0388:  MOVWF  25
0389:  MOVF   21,W
038A:  MOVWF  24
038B:  GOTO   26A
038C:  GOTO   2F3
....................    } 
.................... } 
038D:  SLEEP

Configuration Fuses:
   Word  1: 2FE2   HS NOWDT PUT MCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
