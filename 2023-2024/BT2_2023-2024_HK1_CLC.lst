CCS PCM C Compiler, Version 5.015, 5967               18-Dec-23 17:27

               Filename:   E:\BAI TAP VXL\DETHI-GIAIDETHI\2023-2024\BT2_2023-2024_HK1_CLC.lst

               ROM used:   973 words (12%)
                           Largest free fragment is 2048
               RAM used:   11 (3%) at main() level
                           25 (7%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  03
0001:  MOVWF  0A
0002:  GOTO   307
0003:  NOP
.................... #INCLUDE<16F887.H> 
.................... //////////// Standard Header file for the PIC16F887 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F887 
0004:  DATA 50,29
0005:  DATA 4F,22
0006:  DATA D5,21
0007:  DATA D4,1E
0008:  DATA 25,18
0009:  DATA B2,2A
000A:  DATA 00,00
000B:  DATA 53,2A
000C:  DATA 41,29
000D:  DATA 54,00
000E:  DATA D3,30
000F:  DATA 6E,10
0010:  DATA 50,34
0011:  DATA E1,36
0012:  DATA 3A,10
0013:  DATA 25,18
0014:  DATA B2,2A
0015:  DATA 00,00
0016:  DATA D0,20
0017:  DATA D5,29
0018:  DATA 45,00
0019:  DATA D3,30
001A:  DATA 6E,10
001B:  DATA 50,34
001C:  DATA E1,36
001D:  DATA 3A,10
001E:  DATA 25,18
001F:  DATA B2,2A
0020:  DATA 00,01
0021:  DATA 50,29
0022:  DATA 4F,22
0023:  DATA D5,21
0024:  DATA D4,1E
0025:  DATA 25,18
0026:  DATA B2,2A
0027:  DATA 00,00
*
0141:  MOVF   0B,W
0142:  MOVWF  26
0143:  BCF    0B.7
0144:  BSF    03.5
0145:  BSF    03.6
0146:  BSF    0C.7
0147:  BSF    0C.0
0148:  NOP
0149:  NOP
014A:  BCF    03.5
014B:  BCF    03.6
014C:  BTFSC  26.7
014D:  BSF    0B.7
014E:  BTFSC  03.0
014F:  GOTO   179
0150:  BSF    03.6
0151:  MOVF   0C,W
0152:  ANDLW  7F
0153:  BCF    03.6
0154:  MOVWF  26
0155:  BSF    03.6
0156:  MOVF   0D,W
0157:  BCF    03.6
0158:  MOVWF  27
0159:  BSF    03.6
015A:  MOVF   0F,W
015B:  BCF    03.6
015C:  MOVWF  28
015D:  MOVF   26,W
015E:  BTFSS  0C.4
015F:  GOTO   15E
0160:  MOVWF  19
0161:  MOVF   27,W
0162:  BSF    03.6
0163:  MOVWF  0D
0164:  BCF    03.6
0165:  MOVF   28,W
0166:  BSF    03.6
0167:  MOVWF  0F
0168:  BCF    03.6
0169:  MOVF   0B,W
016A:  MOVWF  29
016B:  BCF    0B.7
016C:  BSF    03.5
016D:  BSF    03.6
016E:  BSF    0C.7
016F:  BSF    0C.0
0170:  NOP
0171:  NOP
0172:  BCF    03.5
0173:  BCF    03.6
0174:  BTFSC  29.7
0175:  BSF    0B.7
0176:  DECFSZ 25,F
0177:  GOTO   179
0178:  GOTO   199
0179:  BSF    03.6
017A:  RLF    0C,W
017B:  RLF    0E,W
017C:  ANDLW  7F
017D:  BCF    03.6
017E:  MOVWF  26
017F:  BSF    03.6
0180:  MOVF   0D,W
0181:  BCF    03.6
0182:  MOVWF  27
0183:  BSF    03.6
0184:  MOVF   0F,W
0185:  BCF    03.6
0186:  MOVWF  28
0187:  MOVF   26,W
0188:  BTFSS  0C.4
0189:  GOTO   188
018A:  MOVWF  19
018B:  MOVF   27,W
018C:  BSF    03.6
018D:  MOVWF  0D
018E:  BCF    03.6
018F:  MOVF   28,W
0190:  BSF    03.6
0191:  MOVWF  0F
0192:  INCF   0D,F
0193:  BTFSC  03.2
0194:  INCF   0F,F
0195:  BCF    03.0
0196:  BCF    03.6
0197:  DECFSZ 25,F
0198:  GOTO   141
0199:  RETURN
019A:  MOVF   28,W
019B:  CLRF   78
019C:  SUBWF  27,W
019D:  BTFSC  03.0
019E:  GOTO   1A2
019F:  MOVF   27,W
01A0:  MOVWF  77
01A1:  GOTO   1AE
01A2:  CLRF   77
01A3:  MOVLW  08
01A4:  MOVWF  29
01A5:  RLF    27,F
01A6:  RLF    77,F
01A7:  MOVF   28,W
01A8:  SUBWF  77,W
01A9:  BTFSC  03.0
01AA:  MOVWF  77
01AB:  RLF    78,F
01AC:  DECFSZ 29,F
01AD:  GOTO   1A5
01AE:  RETURN
01AF:  MOVF   78,W
01B0:  MOVF   25,W
01B1:  MOVWF  27
01B2:  MOVLW  64
01B3:  MOVWF  28
01B4:  CALL   19A
01B5:  MOVF   77,W
01B6:  MOVWF  25
01B7:  MOVF   78,W
01B8:  MOVLW  30
01B9:  BTFSS  03.2
01BA:  GOTO   1C2
01BB:  BTFSS  26.1
01BC:  GOTO   1CA
01BD:  BTFSC  26.3
01BE:  GOTO   1CA
01BF:  BTFSC  26.4
01C0:  MOVLW  20
01C1:  GOTO   1C5
01C2:  BCF    26.3
01C3:  BCF    26.4
01C4:  BSF    26.0
01C5:  ADDWF  78,F
01C6:  MOVF   78,W
01C7:  BTFSS  0C.4
01C8:  GOTO   1C7
01C9:  MOVWF  19
01CA:  MOVF   25,W
01CB:  MOVWF  27
01CC:  MOVLW  0A
01CD:  MOVWF  28
01CE:  CALL   19A
01CF:  MOVF   77,W
01D0:  MOVWF  25
01D1:  MOVF   78,W
01D2:  MOVLW  30
01D3:  BTFSS  03.2
01D4:  GOTO   1DB
01D5:  BTFSC  26.3
01D6:  GOTO   1E0
01D7:  BTFSS  26.0
01D8:  GOTO   1E0
01D9:  BTFSC  26.4
01DA:  MOVLW  20
01DB:  ADDWF  78,F
01DC:  MOVF   78,W
01DD:  BTFSS  0C.4
01DE:  GOTO   1DD
01DF:  MOVWF  19
01E0:  MOVLW  30
01E1:  ADDWF  25,F
01E2:  MOVF   25,W
01E3:  BTFSS  0C.4
01E4:  GOTO   1E3
01E5:  MOVWF  19
01E6:  RETURN
*
0225:  MOVF   0B,W
0226:  MOVWF  25
0227:  BCF    0B.7
0228:  BSF    03.5
0229:  BSF    03.6
022A:  BSF    0C.7
022B:  BSF    0C.0
022C:  NOP
022D:  NOP
022E:  BCF    03.5
022F:  BCF    03.6
0230:  BTFSC  25.7
0231:  BSF    0B.7
0232:  BSF    03.6
0233:  MOVF   0C,W
0234:  ANDLW  7F
0235:  BTFSC  03.2
0236:  GOTO   279
0237:  BCF    03.6
0238:  MOVWF  25
0239:  BSF    03.6
023A:  MOVF   0D,W
023B:  BCF    03.6
023C:  MOVWF  26
023D:  BSF    03.6
023E:  MOVF   0F,W
023F:  BCF    03.6
0240:  MOVWF  27
0241:  MOVF   25,W
0242:  MOVWF  29
0243:  CALL   1F9
0244:  MOVF   26,W
0245:  BSF    03.6
0246:  MOVWF  0D
0247:  BCF    03.6
0248:  MOVF   27,W
0249:  BSF    03.6
024A:  MOVWF  0F
024B:  BCF    03.6
024C:  MOVF   0B,W
024D:  MOVWF  28
024E:  BCF    0B.7
024F:  BSF    03.5
0250:  BSF    03.6
0251:  BSF    0C.7
0252:  BSF    0C.0
0253:  NOP
0254:  NOP
0255:  BCF    03.5
0256:  BCF    03.6
0257:  BTFSC  28.7
0258:  BSF    0B.7
0259:  BSF    03.6
025A:  RLF    0C,W
025B:  RLF    0E,W
025C:  ANDLW  7F
025D:  BTFSC  03.2
025E:  GOTO   279
025F:  BCF    03.6
0260:  MOVWF  25
0261:  BSF    03.6
0262:  MOVF   0D,W
0263:  BCF    03.6
0264:  MOVWF  26
0265:  BSF    03.6
0266:  MOVF   0F,W
0267:  BCF    03.6
0268:  MOVWF  27
0269:  MOVF   25,W
026A:  MOVWF  29
026B:  CALL   1F9
026C:  MOVF   26,W
026D:  BSF    03.6
026E:  MOVWF  0D
026F:  BCF    03.6
0270:  MOVF   27,W
0271:  BSF    03.6
0272:  MOVWF  0F
0273:  INCF   0D,F
0274:  BTFSC  03.2
0275:  INCF   0F,F
0276:  BCF    03.6
0277:  GOTO   225
0278:  BSF    03.6
0279:  BCF    03.6
027A:  RETURN
027B:  MOVF   0B,W
027C:  MOVWF  26
027D:  BCF    0B.7
027E:  BSF    03.5
027F:  BSF    03.6
0280:  BSF    0C.7
0281:  BSF    0C.0
0282:  NOP
0283:  NOP
0284:  BCF    03.5
0285:  BCF    03.6
0286:  BTFSC  26.7
0287:  BSF    0B.7
0288:  BTFSC  03.0
0289:  GOTO   2B2
028A:  BSF    03.6
028B:  MOVF   0C,W
028C:  ANDLW  7F
028D:  BCF    03.6
028E:  MOVWF  26
028F:  BSF    03.6
0290:  MOVF   0D,W
0291:  BCF    03.6
0292:  MOVWF  27
0293:  BSF    03.6
0294:  MOVF   0F,W
0295:  BCF    03.6
0296:  MOVWF  28
0297:  MOVF   26,W
0298:  MOVWF  29
0299:  CALL   1F9
029A:  MOVF   27,W
029B:  BSF    03.6
029C:  MOVWF  0D
029D:  BCF    03.6
029E:  MOVF   28,W
029F:  BSF    03.6
02A0:  MOVWF  0F
02A1:  BCF    03.6
02A2:  MOVF   0B,W
02A3:  MOVWF  29
02A4:  BCF    0B.7
02A5:  BSF    03.5
02A6:  BSF    03.6
02A7:  BSF    0C.7
02A8:  BSF    0C.0
02A9:  NOP
02AA:  NOP
02AB:  BCF    03.5
02AC:  BCF    03.6
02AD:  BTFSC  29.7
02AE:  BSF    0B.7
02AF:  DECFSZ 25,F
02B0:  GOTO   2B2
02B1:  GOTO   2D1
02B2:  BSF    03.6
02B3:  RLF    0C,W
02B4:  RLF    0E,W
02B5:  ANDLW  7F
02B6:  BCF    03.6
02B7:  MOVWF  26
02B8:  BSF    03.6
02B9:  MOVF   0D,W
02BA:  BCF    03.6
02BB:  MOVWF  27
02BC:  BSF    03.6
02BD:  MOVF   0F,W
02BE:  BCF    03.6
02BF:  MOVWF  28
02C0:  MOVF   26,W
02C1:  MOVWF  29
02C2:  CALL   1F9
02C3:  MOVF   27,W
02C4:  BSF    03.6
02C5:  MOVWF  0D
02C6:  BCF    03.6
02C7:  MOVF   28,W
02C8:  BSF    03.6
02C9:  MOVWF  0F
02CA:  INCF   0D,F
02CB:  BTFSC  03.2
02CC:  INCF   0F,F
02CD:  BCF    03.0
02CE:  BCF    03.6
02CF:  DECFSZ 25,F
02D0:  GOTO   27B
02D1:  RETURN
02D2:  MOVF   78,W
02D3:  MOVF   25,W
02D4:  MOVWF  27
02D5:  MOVLW  64
02D6:  MOVWF  28
02D7:  CALL   19A
02D8:  MOVF   77,W
02D9:  MOVWF  25
02DA:  MOVF   78,W
02DB:  MOVLW  30
02DC:  BTFSS  03.2
02DD:  GOTO   2E5
02DE:  BTFSS  26.1
02DF:  GOTO   2EC
02E0:  BTFSC  26.3
02E1:  GOTO   2EC
02E2:  BTFSC  26.4
02E3:  MOVLW  20
02E4:  GOTO   2E8
02E5:  BCF    26.3
02E6:  BCF    26.4
02E7:  BSF    26.0
02E8:  ADDWF  78,F
02E9:  MOVF   78,W
02EA:  MOVWF  29
02EB:  CALL   1F9
02EC:  MOVF   25,W
02ED:  MOVWF  27
02EE:  MOVLW  0A
02EF:  MOVWF  28
02F0:  CALL   19A
02F1:  MOVF   77,W
02F2:  MOVWF  25
02F3:  MOVF   78,W
02F4:  MOVLW  30
02F5:  BTFSS  03.2
02F6:  GOTO   2FD
02F7:  BTFSC  26.3
02F8:  GOTO   301
02F9:  BTFSS  26.0
02FA:  GOTO   301
02FB:  BTFSC  26.4
02FC:  MOVLW  20
02FD:  ADDWF  78,F
02FE:  MOVF   78,W
02FF:  MOVWF  29
0300:  CALL   1F9
0301:  MOVLW  30
0302:  ADDWF  25,F
0303:  MOVF   25,W
0304:  MOVWF  29
0305:  CALL   1F9
0306:  RETURN
....................  
.................... #list 
....................  
.................... #FUSES HS 
.................... #USE DELAY(CLOCK=20M) 
*
0028:  MOVLW  2A
0029:  MOVWF  04
002A:  BCF    03.7
002B:  MOVF   00,W
002C:  BTFSC  03.2
002D:  GOTO   03B
002E:  MOVLW  06
002F:  MOVWF  78
0030:  CLRF   77
0031:  DECFSZ 77,F
0032:  GOTO   031
0033:  DECFSZ 78,F
0034:  GOTO   030
0035:  MOVLW  7B
0036:  MOVWF  77
0037:  DECFSZ 77,F
0038:  GOTO   037
0039:  DECFSZ 00,F
003A:  GOTO   02E
003B:  RETURN
....................  
.................... #USE RS232(BAUD=2400,XMIT=PIN_C6,RCV=PIN_C7) 
....................  
.................... #define LCD_ENABLE_PIN  PIN_D3                                   
.................... #define LCD_RS_PIN      PIN_D1                                  
.................... #define LCD_RW_PIN      PIN_D2                                   
.................... #define LCD_DATA4       PIN_D4                                  
.................... #define LCD_DATA5       PIN_D5                                  
.................... #define LCD_DATA6       PIN_D6                                    
.................... #define LCD_DATA7       PIN_D7 
.................... #INCLUDE<LCD.C> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
*
00A5:  BSF    08.4
....................    output_float(LCD_DATA5); 
00A6:  BSF    08.5
....................    output_float(LCD_DATA6); 
00A7:  BSF    08.6
....................    output_float(LCD_DATA7); 
00A8:  BSF    08.7
....................   #else 
....................    lcdtris.data = 0xF; 
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
00A9:  BCF    03.5
00AA:  BSF    08.2
00AB:  BSF    03.5
00AC:  BCF    08.2
....................    delay_cycles(1); 
00AD:  NOP
....................    lcd_output_enable(1); 
00AE:  BCF    03.5
00AF:  BSF    08.3
00B0:  BSF    03.5
00B1:  BCF    08.3
....................    delay_cycles(1); 
00B2:  NOP
....................    high = lcd_read_nibble(); 
00B3:  BCF    03.5
00B4:  CALL   06C
00B5:  MOVF   78,W
00B6:  MOVWF  31
....................        
....................    lcd_output_enable(0); 
00B7:  BCF    08.3
00B8:  BSF    03.5
00B9:  BCF    08.3
....................    delay_cycles(1); 
00BA:  NOP
....................    lcd_output_enable(1); 
00BB:  BCF    03.5
00BC:  BSF    08.3
00BD:  BSF    03.5
00BE:  BCF    08.3
....................    delay_us(1); 
00BF:  GOTO   0C0
00C0:  GOTO   0C1
00C1:  NOP
....................    low = lcd_read_nibble(); 
00C2:  BCF    03.5
00C3:  CALL   06C
00C4:  MOVF   78,W
00C5:  MOVWF  30
....................        
....................    lcd_output_enable(0); 
00C6:  BCF    08.3
00C7:  BSF    03.5
00C8:  BCF    08.3
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
00C9:  BCF    08.4
....................    output_drive(LCD_DATA5); 
00CA:  BCF    08.5
....................    output_drive(LCD_DATA6); 
00CB:  BCF    08.6
....................    output_drive(LCD_DATA7); 
00CC:  BCF    08.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
00CD:  BCF    03.5
00CE:  SWAPF  31,W
00CF:  MOVWF  77
00D0:  MOVLW  F0
00D1:  ANDWF  77,F
00D2:  MOVF   77,W
00D3:  IORWF  30,W
00D4:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
*
006C:  CLRF   32
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
006D:  BSF    03.5
006E:  BSF    08.4
006F:  MOVLW  00
0070:  BCF    03.5
0071:  BTFSC  08.4
0072:  MOVLW  01
0073:  IORWF  32,F
....................    n |= input(LCD_DATA5) << 1; 
0074:  BSF    03.5
0075:  BSF    08.5
0076:  MOVLW  00
0077:  BCF    03.5
0078:  BTFSC  08.5
0079:  MOVLW  01
007A:  MOVWF  77
007B:  BCF    03.0
007C:  RLF    77,F
007D:  MOVF   77,W
007E:  IORWF  32,F
....................    n |= input(LCD_DATA6) << 2; 
007F:  BSF    03.5
0080:  BSF    08.6
0081:  MOVLW  00
0082:  BCF    03.5
0083:  BTFSC  08.6
0084:  MOVLW  01
0085:  MOVWF  77
0086:  RLF    77,F
0087:  RLF    77,F
0088:  MOVLW  FC
0089:  ANDWF  77,F
008A:  MOVF   77,W
008B:  IORWF  32,F
....................    n |= input(LCD_DATA7) << 3; 
008C:  BSF    03.5
008D:  BSF    08.7
008E:  MOVLW  00
008F:  BCF    03.5
0090:  BTFSC  08.7
0091:  MOVLW  01
0092:  MOVWF  77
0093:  RLF    77,F
0094:  RLF    77,F
0095:  RLF    77,F
0096:  MOVLW  F8
0097:  ANDWF  77,F
0098:  MOVF   77,W
0099:  IORWF  32,F
....................     
....................    return(n); 
009A:  MOVF   32,W
009B:  MOVWF  78
....................   #else 
009C:  RETURN
....................    return(lcd.data); 
....................   #endif 
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
*
003C:  BTFSC  31.0
003D:  GOTO   040
003E:  BCF    08.4
003F:  GOTO   041
0040:  BSF    08.4
0041:  BSF    03.5
0042:  BCF    08.4
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
0043:  BCF    03.5
0044:  BTFSC  31.1
0045:  GOTO   048
0046:  BCF    08.5
0047:  GOTO   049
0048:  BSF    08.5
0049:  BSF    03.5
004A:  BCF    08.5
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
004B:  BCF    03.5
004C:  BTFSC  31.2
004D:  GOTO   050
004E:  BCF    08.6
004F:  GOTO   051
0050:  BSF    08.6
0051:  BSF    03.5
0052:  BCF    08.6
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
0053:  BCF    03.5
0054:  BTFSC  31.3
0055:  GOTO   058
0056:  BCF    08.7
0057:  GOTO   059
0058:  BSF    08.7
0059:  BSF    03.5
005A:  BCF    08.7
....................   #else       
....................    lcdlat.data = n; 
....................   #endif 
....................        
....................    delay_cycles(1); 
005B:  NOP
....................    lcd_output_enable(1); 
005C:  BCF    03.5
005D:  BSF    08.3
005E:  BSF    03.5
005F:  BCF    08.3
....................    delay_us(2); 
0060:  MOVLW  02
0061:  MOVWF  77
0062:  DECFSZ 77,F
0063:  GOTO   062
0064:  GOTO   065
0065:  NOP
....................    lcd_output_enable(0); 
0066:  BCF    03.5
0067:  BCF    08.3
0068:  BSF    03.5
0069:  BCF    08.3
006A:  BCF    03.5
006B:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
009D:  BSF    03.5
009E:  BCF    08.3
....................    lcd_rs_tris(); 
009F:  BCF    08.1
....................    lcd_rw_tris(); 
00A0:  BCF    08.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
00A1:  BCF    03.5
00A2:  BCF    08.1
00A3:  BSF    03.5
00A4:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
00D5:  MOVF   78,W
00D6:  MOVWF  30
00D7:  BTFSS  30.7
00D8:  GOTO   0DB
00D9:  BSF    03.5
00DA:  GOTO   0A5
....................    lcd_output_rs(address); 
00DB:  MOVF   2E,F
00DC:  BTFSS  03.2
00DD:  GOTO   0E0
00DE:  BCF    08.1
00DF:  GOTO   0E1
00E0:  BSF    08.1
00E1:  BSF    03.5
00E2:  BCF    08.1
....................    delay_cycles(1); 
00E3:  NOP
....................    lcd_output_rw(0); 
00E4:  BCF    03.5
00E5:  BCF    08.2
00E6:  BSF    03.5
00E7:  BCF    08.2
....................    delay_cycles(1); 
00E8:  NOP
....................    lcd_output_enable(0); 
00E9:  BCF    03.5
00EA:  BCF    08.3
00EB:  BSF    03.5
00EC:  BCF    08.3
....................    lcd_send_nibble(n >> 4); 
00ED:  BCF    03.5
00EE:  SWAPF  2F,W
00EF:  MOVWF  30
00F0:  MOVLW  0F
00F1:  ANDWF  30,F
00F2:  MOVF   30,W
00F3:  MOVWF  31
00F4:  CALL   03C
....................    lcd_send_nibble(n & 0xf); 
00F5:  MOVF   2F,W
00F6:  ANDLW  0F
00F7:  MOVWF  30
00F8:  MOVWF  31
00F9:  CALL   03C
00FA:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
00FB:  MOVLW  28
00FC:  MOVWF  26
00FD:  MOVLW  0C
00FE:  MOVWF  27
00FF:  MOVLW  01
0100:  MOVWF  28
0101:  MOVLW  06
0102:  MOVWF  29
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
0103:  BCF    08.3
0104:  BSF    03.5
0105:  BCF    08.3
....................    lcd_output_rs(0); 
0106:  BCF    03.5
0107:  BCF    08.1
0108:  BSF    03.5
0109:  BCF    08.1
....................    lcd_output_rw(0); 
010A:  BCF    03.5
010B:  BCF    08.2
010C:  BSF    03.5
010D:  BCF    08.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
010E:  BCF    08.4
....................    output_drive(LCD_DATA5); 
010F:  BCF    08.5
....................    output_drive(LCD_DATA6); 
0110:  BCF    08.6
....................    output_drive(LCD_DATA7); 
0111:  BCF    08.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................    lcd_enable_tris(); 
0112:  BCF    08.3
....................    lcd_rs_tris(); 
0113:  BCF    08.1
....................    lcd_rw_tris(); 
0114:  BCF    08.2
....................  #endif 
....................      
....................    delay_ms(15); 
0115:  MOVLW  0F
0116:  BCF    03.5
0117:  MOVWF  2A
0118:  CALL   028
....................    for(i=1;i<=3;++i) 
0119:  MOVLW  01
011A:  MOVWF  25
011B:  MOVF   25,W
011C:  SUBLW  03
011D:  BTFSS  03.0
011E:  GOTO   127
....................    { 
....................        lcd_send_nibble(3); 
011F:  MOVLW  03
0120:  MOVWF  31
0121:  CALL   03C
....................        delay_ms(5); 
0122:  MOVLW  05
0123:  MOVWF  2A
0124:  CALL   028
0125:  INCF   25,F
0126:  GOTO   11B
....................    } 
....................     
....................    lcd_send_nibble(2); 
0127:  MOVLW  02
0128:  MOVWF  31
0129:  CALL   03C
....................    delay_ms(5); 
012A:  MOVLW  05
012B:  MOVWF  2A
012C:  CALL   028
....................    for(i=0;i<=3;++i) 
012D:  CLRF   25
012E:  MOVF   25,W
012F:  SUBLW  03
0130:  BTFSS  03.0
0131:  GOTO   13E
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
0132:  MOVLW  26
0133:  ADDWF  25,W
0134:  MOVWF  04
0135:  BCF    03.7
0136:  MOVF   00,W
0137:  MOVWF  2A
0138:  CLRF   2E
0139:  MOVF   2A,W
013A:  MOVWF  2F
013B:  CALL   09D
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
013C:  INCF   25,F
013D:  GOTO   12E
013E:  BCF    0A.3
013F:  BCF    0A.4
0140:  GOTO   335 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
*
01E7:  DECFSZ 2B,W
01E8:  GOTO   1EA
01E9:  GOTO   1ED
....................       address=LCD_LINE_TWO; 
01EA:  MOVLW  40
01EB:  MOVWF  2C
01EC:  GOTO   1EE
....................    else 
....................       address=0; 
01ED:  CLRF   2C
....................       
....................    address+=x-1; 
01EE:  MOVLW  01
01EF:  SUBWF  2A,W
01F0:  ADDWF  2C,F
....................    lcd_send_byte(0,0x80|address); 
01F1:  MOVF   2C,W
01F2:  IORLW  80
01F3:  MOVWF  2D
01F4:  CLRF   2E
01F5:  MOVF   2D,W
01F6:  MOVWF  2F
01F7:  CALL   09D
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
01F8:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
01F9:  MOVF   29,W
01FA:  XORLW  07
01FB:  BTFSC  03.2
01FC:  GOTO   207
01FD:  XORLW  0B
01FE:  BTFSC  03.2
01FF:  GOTO   20C
0200:  XORLW  06
0201:  BTFSC  03.2
0202:  GOTO   214
0203:  XORLW  02
0204:  BTFSC  03.2
0205:  GOTO   21A
0206:  GOTO   21F
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
0207:  MOVLW  01
0208:  MOVWF  2A
0209:  MOVWF  2B
020A:  CALL   1E7
020B:  GOTO   224
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
020C:  CLRF   2E
020D:  MOVLW  01
020E:  MOVWF  2F
020F:  CALL   09D
....................                      delay_ms(2); 
0210:  MOVLW  02
0211:  MOVWF  2A
0212:  CALL   028
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
0213:  GOTO   224
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
0214:  MOVLW  01
0215:  MOVWF  2A
0216:  MOVLW  02
0217:  MOVWF  2B
0218:  CALL   1E7
0219:  GOTO   224
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
021A:  CLRF   2E
021B:  MOVLW  10
021C:  MOVWF  2F
021D:  CALL   09D
021E:  GOTO   224
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
021F:  MOVLW  01
0220:  MOVWF  2E
0221:  MOVF   29,W
0222:  MOVWF  2F
0223:  CALL   09D
....................      #endif 
....................    } 
0224:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
.................... UNSIGNED CHAR DATA; 
.................... UNSIGNED INT8 PRODUCT=0,OLDPRODUCT=0; 
.................... UNSIGNED INT1 STATUS=0; // BAN DAU NGUNG DEM 
....................                         //0 NGUNG DEM 
....................                         //1 DEM 
.................... //NHAN S -> DEM COUNTER HIEN THI 'START' TREN LCD 
....................             //TRUYEN LEN MAY TINH KHI CO SAN PHAM 
.................... //NHAN P -> TAT COUNTER HIEN THI 'PAUSE' TREN LCD 
....................  
.................... VOID MAIN() 
*
0307:  MOVF   03,W
0308:  ANDLW  1F
0309:  MOVWF  03
030A:  BSF    03.5
030B:  BSF    03.6
030C:  BSF    07.3
030D:  MOVLW  22
030E:  BCF    03.6
030F:  MOVWF  19
0310:  MOVLW  08
0311:  MOVWF  1A
0312:  MOVLW  A6
0313:  MOVWF  18
0314:  MOVLW  90
0315:  BCF    03.5
0316:  MOVWF  18
0317:  CLRF   21
0318:  CLRF   22
0319:  BCF    23.0
031A:  MOVLW  FF
031B:  MOVWF  24
031C:  BSF    03.5
031D:  BSF    03.6
031E:  MOVF   09,W
031F:  ANDLW  C0
0320:  MOVWF  09
0321:  BCF    03.6
0322:  BCF    1F.4
0323:  BCF    1F.5
0324:  MOVLW  00
0325:  BSF    03.6
0326:  MOVWF  08
0327:  BCF    03.5
0328:  CLRF   07
0329:  CLRF   08
032A:  CLRF   09
032B:  BCF    03.7
.................... { 
....................    SET_TRIS_D(0X00); 
032C:  MOVLW  00
032D:  BSF    03.5
032E:  BCF    03.6
032F:  MOVWF  08
....................    SET_TRIS_C(0X81); 
0330:  MOVLW  81
0331:  MOVWF  07
0332:  BCF    03.5
0333:  MOVWF  24
....................    //INSTALL LCD 
....................    LCD_INIT(); 
0334:  GOTO   0FB
....................    //SETUP_TIMER1 
....................    SETUP_TIMER_1(T1_EXTERNAL|T1_DIV_BY_1); 
0335:  MOVLW  07
0336:  MOVWF  10
....................    SET_TIMER1(0); 
0337:  CLRF   0E
0338:  CLRF   0F
0339:  CLRF   0E
....................    //BAN DAU COUNTER NGUNG DEM HIEN THI SO 0 
....................    PRINTF("PRODUCT=%02U",PRODUCT); 
033A:  MOVLW  04
033B:  BSF    03.6
033C:  MOVWF  0D
033D:  MOVLW  00
033E:  MOVWF  0F
033F:  BCF    03.0
0340:  MOVLW  08
0341:  BCF    03.6
0342:  MOVWF  25
0343:  CALL   141
0344:  MOVF   21,W
0345:  MOVWF  25
0346:  MOVLW  01
0347:  MOVWF  26
0348:  CALL   1AF
....................    WHILE(TRUE) 
....................    { 
....................       IF(KBHIT()==1) 
0349:  MOVLW  00
034A:  BTFSC  0C.5
034B:  MOVLW  01
034C:  SUBLW  01
034D:  BTFSS  03.2
034E:  GOTO   35F
....................       { 
....................          DATA=GETC(); 
034F:  BTFSS  0C.5
0350:  GOTO   34F
0351:  MOVF   1A,W
0352:  MOVWF  20
....................          IF(DATA=='S') 
0353:  MOVF   20,W
0354:  SUBLW  53
0355:  BTFSS  03.2
0356:  GOTO   35B
....................          { 
....................             //BAT DAU DEM 
....................             STATUS=1; 
0357:  BSF    23.0
....................             SETUP_TIMER_1(T1_EXTERNAL|T1_DIV_BY_1); 
0358:  MOVLW  07
0359:  MOVWF  10
....................          } 
035A:  GOTO   35F
....................          ELSE IF(DATA=='P') 
035B:  MOVF   20,W
035C:  SUBLW  50
035D:  BTFSC  03.2
....................          { 
....................             //NGUNG DEM 
....................             STATUS=0; 
035E:  BCF    23.0
....................             //SETUP_TIMER_1(T1_DISABLED ); 
....................          } 
....................       } 
....................       IF(STATUS==1) 
035F:  BTFSS  23.0
0360:  GOTO   395
....................       { 
....................          PRODUCT=GET_TIMER1(); 
0361:  MOVF   0F,W
0362:  MOVWF  7A
0363:  MOVF   0E,W
0364:  MOVWF  77
0365:  MOVF   0F,W
0366:  SUBWF  7A,W
0367:  BTFSS  03.2
0368:  GOTO   361
0369:  MOVF   77,W
036A:  MOVWF  21
....................          IF(PRODUCT>24) 
036B:  MOVF   21,W
036C:  SUBLW  18
036D:  BTFSC  03.0
036E:  GOTO   374
....................          { 
....................             PRODUCT=1; 
036F:  MOVLW  01
0370:  MOVWF  21
....................             SET_TIMER1(1); 
0371:  CLRF   0E
0372:  CLRF   0F
0373:  MOVWF  0E
....................          } 
....................          LCD_GOTOXY(7,1); 
0374:  MOVLW  07
0375:  MOVWF  2A
0376:  MOVLW  01
0377:  MOVWF  2B
0378:  CALL   1E7
....................          LCD_PUTC("START"); 
0379:  MOVLW  0B
037A:  BSF    03.6
037B:  MOVWF  0D
037C:  MOVLW  00
037D:  MOVWF  0F
037E:  BCF    03.6
037F:  CALL   225
....................          LCD_GOTOXY(1,2); 
0380:  MOVLW  01
0381:  MOVWF  2A
0382:  MOVLW  02
0383:  MOVWF  2B
0384:  CALL   1E7
....................          PRINTF(LCD_PUTC,"San Pham: %02U",PRODUCT); 
0385:  MOVLW  0E
0386:  BSF    03.6
0387:  MOVWF  0D
0388:  MOVLW  00
0389:  MOVWF  0F
038A:  BCF    03.0
038B:  MOVLW  0A
038C:  BCF    03.6
038D:  MOVWF  25
038E:  CALL   27B
038F:  MOVF   21,W
0390:  MOVWF  25
0391:  MOVLW  01
0392:  MOVWF  26
0393:  CALL   2D2
....................       } 
0394:  GOTO   3B6
....................       ELSE 
....................       { 
....................          SETUP_TIMER_1(T1_DISABLED ); 
0395:  CLRF   10
....................          LCD_GOTOXY(7,1); 
0396:  MOVLW  07
0397:  MOVWF  2A
0398:  MOVLW  01
0399:  MOVWF  2B
039A:  CALL   1E7
....................          LCD_PUTC("PAUSE"); 
039B:  MOVLW  16
039C:  BSF    03.6
039D:  MOVWF  0D
039E:  MOVLW  00
039F:  MOVWF  0F
03A0:  BCF    03.6
03A1:  CALL   225
....................          LCD_GOTOXY(1,2); 
03A2:  MOVLW  01
03A3:  MOVWF  2A
03A4:  MOVLW  02
03A5:  MOVWF  2B
03A6:  CALL   1E7
....................          PRINTF(LCD_PUTC,"San Pham: %02U",PRODUCT);    
03A7:  MOVLW  19
03A8:  BSF    03.6
03A9:  MOVWF  0D
03AA:  MOVLW  00
03AB:  MOVWF  0F
03AC:  BCF    03.0
03AD:  MOVLW  0A
03AE:  BCF    03.6
03AF:  MOVWF  25
03B0:  CALL   27B
03B1:  MOVF   21,W
03B2:  MOVWF  25
03B3:  MOVLW  01
03B4:  MOVWF  26
03B5:  CALL   2D2
....................       } 
....................       IF(OLDPRODUCT!=PRODUCT) 
03B6:  MOVF   21,W
03B7:  SUBWF  22,W
03B8:  BTFSC  03.2
03B9:  GOTO   3CB
....................       { 
....................          OLDPRODUCT=PRODUCT; 
03BA:  MOVF   21,W
03BB:  MOVWF  22
....................          PRINTF("PRODUCT=%02U",PRODUCT); 
03BC:  MOVLW  21
03BD:  BSF    03.6
03BE:  MOVWF  0D
03BF:  MOVLW  00
03C0:  MOVWF  0F
03C1:  BCF    03.0
03C2:  MOVLW  08
03C3:  BCF    03.6
03C4:  MOVWF  25
03C5:  CALL   141
03C6:  MOVF   21,W
03C7:  MOVWF  25
03C8:  MOVLW  01
03C9:  MOVWF  26
03CA:  CALL   1AF
....................       } 
03CB:  GOTO   349
....................    } 
.................... } 
03CC:  SLEEP

Configuration Fuses:
   Word  1: 2FE2   HS NOWDT PUT MCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
