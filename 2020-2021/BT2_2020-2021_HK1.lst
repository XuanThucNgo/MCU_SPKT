CCS PCM C Compiler, Version 5.015, 5967               17-Dec-23 02:18

               Filename:   E:\BAI TAP VXL\DETHI-GIAIDETHI\2020-2021\BT2_2020-2021_HK1.lst

               ROM used:   1130 words (14%)
                           Largest free fragment is 2048
               RAM used:   11 (3%) at main() level
                           29 (8%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  03
0001:  MOVWF  0A
0002:  GOTO   336
0003:  NOP
.................... #INCLUDE<16F887.H> 
.................... //////////// Standard Header file for the PIC16F887 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F887 
0004:  DATA D1,2A
0005:  DATA 41,10
0006:  DATA 4E,24
0007:  DATA C9,22
0008:  DATA 54,10
0009:  DATA CB,18
000A:  DATA 00,00
000B:  DATA D1,2A
000C:  DATA 41,10
000D:  DATA 4E,24
000E:  DATA C9,22
000F:  DATA 54,10
0010:  DATA 4B,19
0011:  DATA 00,01
0012:  DATA D1,2A
0013:  DATA 41,10
0014:  DATA 4E,24
0015:  DATA C9,22
0016:  DATA 54,10
0017:  DATA B2,25
0018:  DATA 00,01
0019:  DATA 20,10
001A:  DATA 20,10
001B:  DATA 20,10
001C:  DATA 20,10
001D:  DATA 20,10
001E:  DATA 20,10
001F:  DATA 00,00
*
0139:  MOVLW  8E
013A:  MOVWF  77
013B:  MOVF   27,W
013C:  MOVWF  78
013D:  MOVF   26,W
013E:  MOVWF  79
013F:  CLRF   7A
0140:  MOVF   78,F
0141:  BTFSS  03.2
0142:  GOTO   14D
0143:  MOVF   79,W
0144:  MOVWF  78
0145:  CLRF   79
0146:  MOVLW  08
0147:  SUBWF  77,F
0148:  MOVF   78,F
0149:  BTFSS  03.2
014A:  GOTO   14D
014B:  CLRF   77
014C:  GOTO   155
014D:  BCF    03.0
014E:  BTFSC  78.7
014F:  GOTO   154
0150:  RLF    79,F
0151:  RLF    78,F
0152:  DECF   77,F
0153:  GOTO   14D
0154:  BCF    78.7
0155:  RETURN
0156:  MOVF   26,W
0157:  BTFSC  03.2
0158:  GOTO   21B
0159:  MOVWF  32
015A:  MOVF   2A,W
015B:  BTFSC  03.2
015C:  GOTO   21B
015D:  SUBWF  32,F
015E:  BTFSS  03.0
015F:  GOTO   165
0160:  MOVLW  7F
0161:  ADDWF  32,F
0162:  BTFSC  03.0
0163:  GOTO   21B
0164:  GOTO   16B
0165:  MOVLW  81
0166:  SUBWF  32,F
0167:  BTFSS  03.0
0168:  GOTO   21B
0169:  BTFSC  03.2
016A:  GOTO   21B
016B:  MOVF   32,W
016C:  MOVWF  77
016D:  CLRF   78
016E:  CLRF   79
016F:  CLRF   7A
0170:  CLRF   31
0171:  MOVF   27,W
0172:  MOVWF  30
0173:  BSF    30.7
0174:  MOVF   28,W
0175:  MOVWF  2F
0176:  MOVF   29,W
0177:  MOVWF  2E
0178:  MOVLW  19
0179:  MOVWF  32
017A:  MOVF   2D,W
017B:  SUBWF  2E,F
017C:  BTFSC  03.0
017D:  GOTO   18E
017E:  MOVLW  01
017F:  SUBWF  2F,F
0180:  BTFSC  03.0
0181:  GOTO   18E
0182:  SUBWF  30,F
0183:  BTFSC  03.0
0184:  GOTO   18E
0185:  SUBWF  31,F
0186:  BTFSC  03.0
0187:  GOTO   18E
0188:  INCF   31,F
0189:  INCF   30,F
018A:  INCF   2F,F
018B:  MOVF   2D,W
018C:  ADDWF  2E,F
018D:  GOTO   1C0
018E:  MOVF   2C,W
018F:  SUBWF  2F,F
0190:  BTFSC  03.0
0191:  GOTO   1A9
0192:  MOVLW  01
0193:  SUBWF  30,F
0194:  BTFSC  03.0
0195:  GOTO   1A9
0196:  SUBWF  31,F
0197:  BTFSC  03.0
0198:  GOTO   1A9
0199:  INCF   31,F
019A:  INCF   30,F
019B:  MOVF   2C,W
019C:  ADDWF  2F,F
019D:  MOVF   2D,W
019E:  ADDWF  2E,F
019F:  BTFSS  03.0
01A0:  GOTO   1C0
01A1:  INCF   2F,F
01A2:  BTFSS  03.2
01A3:  GOTO   1C0
01A4:  INCF   30,F
01A5:  BTFSS  03.2
01A6:  GOTO   1C0
01A7:  INCF   31,F
01A8:  GOTO   1C0
01A9:  MOVF   2B,W
01AA:  IORLW  80
01AB:  SUBWF  30,F
01AC:  BTFSC  03.0
01AD:  GOTO   1BF
01AE:  MOVLW  01
01AF:  SUBWF  31,F
01B0:  BTFSC  03.0
01B1:  GOTO   1BF
01B2:  INCF   31,F
01B3:  MOVF   2B,W
01B4:  IORLW  80
01B5:  ADDWF  30,F
01B6:  MOVF   2C,W
01B7:  ADDWF  2F,F
01B8:  BTFSS  03.0
01B9:  GOTO   19D
01BA:  INCF   30,F
01BB:  BTFSS  03.2
01BC:  GOTO   19D
01BD:  INCF   31,F
01BE:  GOTO   19D
01BF:  BSF    7A.0
01C0:  DECFSZ 32,F
01C1:  GOTO   1C3
01C2:  GOTO   1CE
01C3:  BCF    03.0
01C4:  RLF    2E,F
01C5:  RLF    2F,F
01C6:  RLF    30,F
01C7:  RLF    31,F
01C8:  BCF    03.0
01C9:  RLF    7A,F
01CA:  RLF    79,F
01CB:  RLF    78,F
01CC:  RLF    33,F
01CD:  GOTO   17A
01CE:  BTFSS  33.0
01CF:  GOTO   1D6
01D0:  BCF    03.0
01D1:  RRF    78,F
01D2:  RRF    79,F
01D3:  RRF    7A,F
01D4:  RRF    33,F
01D5:  GOTO   1D9
01D6:  DECF   77,F
01D7:  BTFSC  03.2
01D8:  GOTO   21B
01D9:  BTFSC  33.7
01DA:  GOTO   202
01DB:  BCF    03.0
01DC:  RLF    2E,F
01DD:  RLF    2F,F
01DE:  RLF    30,F
01DF:  RLF    31,F
01E0:  MOVF   2D,W
01E1:  SUBWF  2E,F
01E2:  BTFSC  03.0
01E3:  GOTO   1EE
01E4:  MOVLW  01
01E5:  SUBWF  2F,F
01E6:  BTFSC  03.0
01E7:  GOTO   1EE
01E8:  SUBWF  30,F
01E9:  BTFSC  03.0
01EA:  GOTO   1EE
01EB:  SUBWF  31,F
01EC:  BTFSS  03.0
01ED:  GOTO   211
01EE:  MOVF   2C,W
01EF:  SUBWF  2F,F
01F0:  BTFSC  03.0
01F1:  GOTO   1F9
01F2:  MOVLW  01
01F3:  SUBWF  30,F
01F4:  BTFSC  03.0
01F5:  GOTO   1F9
01F6:  SUBWF  31,F
01F7:  BTFSS  03.0
01F8:  GOTO   211
01F9:  MOVF   2B,W
01FA:  IORLW  80
01FB:  SUBWF  30,F
01FC:  BTFSC  03.0
01FD:  GOTO   202
01FE:  MOVLW  01
01FF:  SUBWF  31,F
0200:  BTFSS  03.0
0201:  GOTO   211
0202:  INCF   7A,F
0203:  BTFSS  03.2
0204:  GOTO   211
0205:  INCF   79,F
0206:  BTFSS  03.2
0207:  GOTO   211
0208:  INCF   78,F
0209:  BTFSS  03.2
020A:  GOTO   211
020B:  INCF   77,F
020C:  BTFSC  03.2
020D:  GOTO   21B
020E:  RRF    78,F
020F:  RRF    79,F
0210:  RRF    7A,F
0211:  MOVF   27,W
0212:  MOVWF  32
0213:  MOVF   2B,W
0214:  XORWF  32,F
0215:  BTFSS  32.7
0216:  GOTO   219
0217:  BSF    78.7
0218:  GOTO   21F
0219:  BCF    78.7
021A:  GOTO   21F
021B:  CLRF   77
021C:  CLRF   78
021D:  CLRF   79
021E:  CLRF   7A
021F:  RETURN
0220:  MOVLW  8E
0221:  MOVWF  77
0222:  MOVF   24,W
0223:  SUBWF  77,F
0224:  MOVF   25,W
0225:  MOVWF  79
0226:  MOVF   26,W
0227:  MOVWF  78
0228:  BSF    79.7
0229:  MOVF   77,F
022A:  BTFSC  03.2
022B:  GOTO   237
022C:  BCF    03.0
022D:  MOVF   79,F
022E:  BTFSS  03.2
022F:  GOTO   233
0230:  MOVF   78,F
0231:  BTFSC  03.2
0232:  GOTO   237
0233:  RRF    79,F
0234:  RRF    78,F
0235:  DECFSZ 77,F
0236:  GOTO   22C
0237:  BTFSS  25.7
0238:  GOTO   23E
0239:  COMF   78,F
023A:  COMF   79,F
023B:  INCF   78,F
023C:  BTFSC  03.2
023D:  INCF   79,F
023E:  RETURN
*
027D:  CLRF   2C
027E:  MOVF   04,W
027F:  MOVWF  2B
0280:  BCF    2C.0
0281:  BTFSC  03.7
0282:  BSF    2C.0
0283:  SWAPF  25,W
0284:  IORLW  F0
0285:  MOVWF  27
0286:  ADDWF  27,F
0287:  ADDLW  E2
0288:  MOVWF  28
0289:  ADDLW  32
028A:  MOVWF  2A
028B:  MOVF   25,W
028C:  ANDLW  0F
028D:  ADDWF  28,F
028E:  ADDWF  28,F
028F:  ADDWF  2A,F
0290:  ADDLW  E9
0291:  MOVWF  29
0292:  ADDWF  29,F
0293:  ADDWF  29,F
0294:  SWAPF  24,W
0295:  ANDLW  0F
0296:  ADDWF  29,F
0297:  ADDWF  2A,F
0298:  RLF    29,F
0299:  RLF    2A,F
029A:  COMF   2A,F
029B:  RLF    2A,F
029C:  MOVF   24,W
029D:  ANDLW  0F
029E:  ADDWF  2A,F
029F:  RLF    27,F
02A0:  MOVLW  07
02A1:  MOVWF  26
02A2:  MOVLW  0A
02A3:  ADDWF  2A,F
02A4:  DECF   29,F
02A5:  BTFSS  03.0
02A6:  GOTO   2A3
02A7:  ADDWF  29,F
02A8:  DECF   28,F
02A9:  BTFSS  03.0
02AA:  GOTO   2A7
02AB:  ADDWF  28,F
02AC:  DECF   27,F
02AD:  BTFSS  03.0
02AE:  GOTO   2AB
02AF:  ADDWF  27,F
02B0:  DECF   26,F
02B1:  BTFSS  03.0
02B2:  GOTO   2AF
02B3:  MOVLW  26
02B4:  MOVWF  04
02B5:  BCF    03.7
02B6:  MOVLW  07
02B7:  ANDWF  2B,W
02B8:  BCF    2B.6
02B9:  ADDWF  04,F
02BA:  MOVLW  2A
02BB:  SUBWF  04,W
02BC:  BTFSC  03.2
02BD:  BSF    2B.6
02BE:  MOVF   00,W
02BF:  MOVWF  77
02C0:  BTFSS  03.2
02C1:  GOTO   2CA
02C2:  BTFSC  2B.6
02C3:  GOTO   2CA
02C4:  BTFSC  2B.4
02C5:  GOTO   2DC
02C6:  BTFSC  2B.3
02C7:  GOTO   2CA
02C8:  MOVLW  20
02C9:  GOTO   2CD
02CA:  BSF    2B.3
02CB:  BCF    2B.4
02CC:  MOVLW  30
02CD:  ADDWF  77,F
02CE:  CLRF   25
02CF:  MOVF   04,W
02D0:  MOVWF  24
02D1:  BCF    25.0
02D2:  BTFSC  03.7
02D3:  BSF    25.0
02D4:  MOVF   77,W
02D5:  MOVWF  2D
02D6:  CALL   251
02D7:  MOVF   24,W
02D8:  MOVWF  04
02D9:  BCF    03.7
02DA:  BTFSC  25.0
02DB:  BSF    03.7
02DC:  INCF   04,F
02DD:  BTFSS  2B.6
02DE:  GOTO   2BA
02DF:  RETURN
02E0:  MOVF   0B,W
02E1:  MOVWF  24
02E2:  BCF    0B.7
02E3:  BSF    03.5
02E4:  BSF    03.6
02E5:  BSF    0C.7
02E6:  BSF    0C.0
02E7:  NOP
02E8:  NOP
02E9:  BCF    03.5
02EA:  BCF    03.6
02EB:  BTFSC  24.7
02EC:  BSF    0B.7
02ED:  BSF    03.6
02EE:  MOVF   0C,W
02EF:  ANDLW  7F
02F0:  BTFSC  03.2
02F1:  GOTO   334
02F2:  BCF    03.6
02F3:  MOVWF  24
02F4:  BSF    03.6
02F5:  MOVF   0D,W
02F6:  BCF    03.6
02F7:  MOVWF  25
02F8:  BSF    03.6
02F9:  MOVF   0F,W
02FA:  BCF    03.6
02FB:  MOVWF  26
02FC:  MOVF   24,W
02FD:  MOVWF  2D
02FE:  CALL   251
02FF:  MOVF   25,W
0300:  BSF    03.6
0301:  MOVWF  0D
0302:  BCF    03.6
0303:  MOVF   26,W
0304:  BSF    03.6
0305:  MOVWF  0F
0306:  BCF    03.6
0307:  MOVF   0B,W
0308:  MOVWF  27
0309:  BCF    0B.7
030A:  BSF    03.5
030B:  BSF    03.6
030C:  BSF    0C.7
030D:  BSF    0C.0
030E:  NOP
030F:  NOP
0310:  BCF    03.5
0311:  BCF    03.6
0312:  BTFSC  27.7
0313:  BSF    0B.7
0314:  BSF    03.6
0315:  RLF    0C,W
0316:  RLF    0E,W
0317:  ANDLW  7F
0318:  BTFSC  03.2
0319:  GOTO   334
031A:  BCF    03.6
031B:  MOVWF  24
031C:  BSF    03.6
031D:  MOVF   0D,W
031E:  BCF    03.6
031F:  MOVWF  25
0320:  BSF    03.6
0321:  MOVF   0F,W
0322:  BCF    03.6
0323:  MOVWF  26
0324:  MOVF   24,W
0325:  MOVWF  2D
0326:  CALL   251
0327:  MOVF   25,W
0328:  BSF    03.6
0329:  MOVWF  0D
032A:  BCF    03.6
032B:  MOVF   26,W
032C:  BSF    03.6
032D:  MOVWF  0F
032E:  INCF   0D,F
032F:  BTFSC  03.2
0330:  INCF   0F,F
0331:  BCF    03.6
0332:  GOTO   2E0
0333:  BSF    03.6
0334:  BCF    03.6
0335:  RETURN
....................  
.................... #list 
....................  
.................... #DEVICE ADC=10 
.................... #FUSES HS 
.................... #USE DELAY(CLOCK=20M) 
*
0020:  MOVLW  2E
0021:  MOVWF  04
0022:  BCF    03.7
0023:  MOVF   00,W
0024:  BTFSC  03.2
0025:  GOTO   033
0026:  MOVLW  06
0027:  MOVWF  78
0028:  CLRF   77
0029:  DECFSZ 77,F
002A:  GOTO   029
002B:  DECFSZ 78,F
002C:  GOTO   028
002D:  MOVLW  7B
002E:  MOVWF  77
002F:  DECFSZ 77,F
0030:  GOTO   02F
0031:  DECFSZ 00,F
0032:  GOTO   026
0033:  RETURN
....................  
.................... #define LCD_ENABLE_PIN  PIN_D3                                     
.................... #define LCD_RS_PIN      PIN_D1                                 
.................... #define LCD_RW_PIN      PIN_D2                                 
.................... #define LCD_DATA4       PIN_D4                                  
.................... #define LCD_DATA5       PIN_D5                                  
.................... #define LCD_DATA6       PIN_D6                                  
.................... #define LCD_DATA7       PIN_D7 
....................  
.................... #INCLUDE<LCD.C> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
*
009D:  BSF    08.4
....................    output_float(LCD_DATA5); 
009E:  BSF    08.5
....................    output_float(LCD_DATA6); 
009F:  BSF    08.6
....................    output_float(LCD_DATA7); 
00A0:  BSF    08.7
....................   #else 
....................    lcdtris.data = 0xF; 
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
00A1:  BCF    03.5
00A2:  BSF    08.2
00A3:  BSF    03.5
00A4:  BCF    08.2
....................    delay_cycles(1); 
00A5:  NOP
....................    lcd_output_enable(1); 
00A6:  BCF    03.5
00A7:  BSF    08.3
00A8:  BSF    03.5
00A9:  BCF    08.3
....................    delay_cycles(1); 
00AA:  NOP
....................    high = lcd_read_nibble(); 
00AB:  BCF    03.5
00AC:  CALL   064
00AD:  MOVF   78,W
00AE:  MOVWF  35
....................        
....................    lcd_output_enable(0); 
00AF:  BCF    08.3
00B0:  BSF    03.5
00B1:  BCF    08.3
....................    delay_cycles(1); 
00B2:  NOP
....................    lcd_output_enable(1); 
00B3:  BCF    03.5
00B4:  BSF    08.3
00B5:  BSF    03.5
00B6:  BCF    08.3
....................    delay_us(1); 
00B7:  GOTO   0B8
00B8:  GOTO   0B9
00B9:  NOP
....................    low = lcd_read_nibble(); 
00BA:  BCF    03.5
00BB:  CALL   064
00BC:  MOVF   78,W
00BD:  MOVWF  34
....................        
....................    lcd_output_enable(0); 
00BE:  BCF    08.3
00BF:  BSF    03.5
00C0:  BCF    08.3
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
00C1:  BCF    08.4
....................    output_drive(LCD_DATA5); 
00C2:  BCF    08.5
....................    output_drive(LCD_DATA6); 
00C3:  BCF    08.6
....................    output_drive(LCD_DATA7); 
00C4:  BCF    08.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
00C5:  BCF    03.5
00C6:  SWAPF  35,W
00C7:  MOVWF  77
00C8:  MOVLW  F0
00C9:  ANDWF  77,F
00CA:  MOVF   77,W
00CB:  IORWF  34,W
00CC:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
*
0064:  CLRF   36
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
0065:  BSF    03.5
0066:  BSF    08.4
0067:  MOVLW  00
0068:  BCF    03.5
0069:  BTFSC  08.4
006A:  MOVLW  01
006B:  IORWF  36,F
....................    n |= input(LCD_DATA5) << 1; 
006C:  BSF    03.5
006D:  BSF    08.5
006E:  MOVLW  00
006F:  BCF    03.5
0070:  BTFSC  08.5
0071:  MOVLW  01
0072:  MOVWF  77
0073:  BCF    03.0
0074:  RLF    77,F
0075:  MOVF   77,W
0076:  IORWF  36,F
....................    n |= input(LCD_DATA6) << 2; 
0077:  BSF    03.5
0078:  BSF    08.6
0079:  MOVLW  00
007A:  BCF    03.5
007B:  BTFSC  08.6
007C:  MOVLW  01
007D:  MOVWF  77
007E:  RLF    77,F
007F:  RLF    77,F
0080:  MOVLW  FC
0081:  ANDWF  77,F
0082:  MOVF   77,W
0083:  IORWF  36,F
....................    n |= input(LCD_DATA7) << 3; 
0084:  BSF    03.5
0085:  BSF    08.7
0086:  MOVLW  00
0087:  BCF    03.5
0088:  BTFSC  08.7
0089:  MOVLW  01
008A:  MOVWF  77
008B:  RLF    77,F
008C:  RLF    77,F
008D:  RLF    77,F
008E:  MOVLW  F8
008F:  ANDWF  77,F
0090:  MOVF   77,W
0091:  IORWF  36,F
....................     
....................    return(n); 
0092:  MOVF   36,W
0093:  MOVWF  78
....................   #else 
0094:  RETURN
....................    return(lcd.data); 
....................   #endif 
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
*
0034:  BTFSC  35.0
0035:  GOTO   038
0036:  BCF    08.4
0037:  GOTO   039
0038:  BSF    08.4
0039:  BSF    03.5
003A:  BCF    08.4
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
003B:  BCF    03.5
003C:  BTFSC  35.1
003D:  GOTO   040
003E:  BCF    08.5
003F:  GOTO   041
0040:  BSF    08.5
0041:  BSF    03.5
0042:  BCF    08.5
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
0043:  BCF    03.5
0044:  BTFSC  35.2
0045:  GOTO   048
0046:  BCF    08.6
0047:  GOTO   049
0048:  BSF    08.6
0049:  BSF    03.5
004A:  BCF    08.6
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
004B:  BCF    03.5
004C:  BTFSC  35.3
004D:  GOTO   050
004E:  BCF    08.7
004F:  GOTO   051
0050:  BSF    08.7
0051:  BSF    03.5
0052:  BCF    08.7
....................   #else       
....................    lcdlat.data = n; 
....................   #endif 
....................        
....................    delay_cycles(1); 
0053:  NOP
....................    lcd_output_enable(1); 
0054:  BCF    03.5
0055:  BSF    08.3
0056:  BSF    03.5
0057:  BCF    08.3
....................    delay_us(2); 
0058:  MOVLW  02
0059:  MOVWF  77
005A:  DECFSZ 77,F
005B:  GOTO   05A
005C:  GOTO   05D
005D:  NOP
....................    lcd_output_enable(0); 
005E:  BCF    03.5
005F:  BCF    08.3
0060:  BSF    03.5
0061:  BCF    08.3
0062:  BCF    03.5
0063:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0095:  BSF    03.5
0096:  BCF    08.3
....................    lcd_rs_tris(); 
0097:  BCF    08.1
....................    lcd_rw_tris(); 
0098:  BCF    08.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0099:  BCF    03.5
009A:  BCF    08.1
009B:  BSF    03.5
009C:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
00CD:  MOVF   78,W
00CE:  MOVWF  34
00CF:  BTFSS  34.7
00D0:  GOTO   0D3
00D1:  BSF    03.5
00D2:  GOTO   09D
....................    lcd_output_rs(address); 
00D3:  MOVF   32,F
00D4:  BTFSS  03.2
00D5:  GOTO   0D8
00D6:  BCF    08.1
00D7:  GOTO   0D9
00D8:  BSF    08.1
00D9:  BSF    03.5
00DA:  BCF    08.1
....................    delay_cycles(1); 
00DB:  NOP
....................    lcd_output_rw(0); 
00DC:  BCF    03.5
00DD:  BCF    08.2
00DE:  BSF    03.5
00DF:  BCF    08.2
....................    delay_cycles(1); 
00E0:  NOP
....................    lcd_output_enable(0); 
00E1:  BCF    03.5
00E2:  BCF    08.3
00E3:  BSF    03.5
00E4:  BCF    08.3
....................    lcd_send_nibble(n >> 4); 
00E5:  BCF    03.5
00E6:  SWAPF  33,W
00E7:  MOVWF  34
00E8:  MOVLW  0F
00E9:  ANDWF  34,F
00EA:  MOVF   34,W
00EB:  MOVWF  35
00EC:  CALL   034
....................    lcd_send_nibble(n & 0xf); 
00ED:  MOVF   33,W
00EE:  ANDLW  0F
00EF:  MOVWF  34
00F0:  MOVWF  35
00F1:  CALL   034
00F2:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
00F3:  MOVLW  28
00F4:  MOVWF  25
00F5:  MOVLW  0C
00F6:  MOVWF  26
00F7:  MOVLW  01
00F8:  MOVWF  27
00F9:  MOVLW  06
00FA:  MOVWF  28
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
00FB:  BCF    08.3
00FC:  BSF    03.5
00FD:  BCF    08.3
....................    lcd_output_rs(0); 
00FE:  BCF    03.5
00FF:  BCF    08.1
0100:  BSF    03.5
0101:  BCF    08.1
....................    lcd_output_rw(0); 
0102:  BCF    03.5
0103:  BCF    08.2
0104:  BSF    03.5
0105:  BCF    08.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
0106:  BCF    08.4
....................    output_drive(LCD_DATA5); 
0107:  BCF    08.5
....................    output_drive(LCD_DATA6); 
0108:  BCF    08.6
....................    output_drive(LCD_DATA7); 
0109:  BCF    08.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................    lcd_enable_tris(); 
010A:  BCF    08.3
....................    lcd_rs_tris(); 
010B:  BCF    08.1
....................    lcd_rw_tris(); 
010C:  BCF    08.2
....................  #endif 
....................      
....................    delay_ms(15); 
010D:  MOVLW  0F
010E:  BCF    03.5
010F:  MOVWF  2E
0110:  CALL   020
....................    for(i=1;i<=3;++i) 
0111:  MOVLW  01
0112:  MOVWF  24
0113:  MOVF   24,W
0114:  SUBLW  03
0115:  BTFSS  03.0
0116:  GOTO   11F
....................    { 
....................        lcd_send_nibble(3); 
0117:  MOVLW  03
0118:  MOVWF  35
0119:  CALL   034
....................        delay_ms(5); 
011A:  MOVLW  05
011B:  MOVWF  2E
011C:  CALL   020
011D:  INCF   24,F
011E:  GOTO   113
....................    } 
....................     
....................    lcd_send_nibble(2); 
011F:  MOVLW  02
0120:  MOVWF  35
0121:  CALL   034
....................    delay_ms(5); 
0122:  MOVLW  05
0123:  MOVWF  2E
0124:  CALL   020
....................    for(i=0;i<=3;++i) 
0125:  CLRF   24
0126:  MOVF   24,W
0127:  SUBLW  03
0128:  BTFSS  03.0
0129:  GOTO   136
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
012A:  MOVLW  25
012B:  ADDWF  24,W
012C:  MOVWF  04
012D:  BCF    03.7
012E:  MOVF   00,W
012F:  MOVWF  29
0130:  CLRF   32
0131:  MOVF   29,W
0132:  MOVWF  33
0133:  CALL   095
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0134:  INCF   24,F
0135:  GOTO   126
0136:  BCF    0A.3
0137:  BCF    0A.4
0138:  GOTO   355 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
*
023F:  DECFSZ 2F,W
0240:  GOTO   242
0241:  GOTO   245
....................       address=LCD_LINE_TWO; 
0242:  MOVLW  40
0243:  MOVWF  30
0244:  GOTO   246
....................    else 
....................       address=0; 
0245:  CLRF   30
....................       
....................    address+=x-1; 
0246:  MOVLW  01
0247:  SUBWF  2E,W
0248:  ADDWF  30,F
....................    lcd_send_byte(0,0x80|address); 
0249:  MOVF   30,W
024A:  IORLW  80
024B:  MOVWF  31
024C:  CLRF   32
024D:  MOVF   31,W
024E:  MOVWF  33
024F:  CALL   095
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0250:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
0251:  MOVF   2D,W
0252:  XORLW  07
0253:  BTFSC  03.2
0254:  GOTO   25F
0255:  XORLW  0B
0256:  BTFSC  03.2
0257:  GOTO   264
0258:  XORLW  06
0259:  BTFSC  03.2
025A:  GOTO   26C
025B:  XORLW  02
025C:  BTFSC  03.2
025D:  GOTO   272
025E:  GOTO   277
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
025F:  MOVLW  01
0260:  MOVWF  2E
0261:  MOVWF  2F
0262:  CALL   23F
0263:  GOTO   27C
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
0264:  CLRF   32
0265:  MOVLW  01
0266:  MOVWF  33
0267:  CALL   095
....................                      delay_ms(2); 
0268:  MOVLW  02
0269:  MOVWF  2E
026A:  CALL   020
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
026B:  GOTO   27C
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
026C:  MOVLW  01
026D:  MOVWF  2E
026E:  MOVLW  02
026F:  MOVWF  2F
0270:  CALL   23F
0271:  GOTO   27C
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
0272:  CLRF   32
0273:  MOVLW  10
0274:  MOVWF  33
0275:  CALL   095
0276:  GOTO   27C
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
0277:  MOVLW  01
0278:  MOVWF  32
0279:  MOVF   2D,W
027A:  MOVWF  33
027B:  CALL   095
....................      #endif 
....................    } 
027C:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
.................... UNSIGNED INT16 TEMP1=0,TEMP2=0; 
....................  
.................... VOID MAIN() 
*
0336:  MOVF   03,W
0337:  ANDLW  1F
0338:  MOVWF  03
0339:  CLRF   21
033A:  CLRF   20
033B:  CLRF   23
033C:  CLRF   22
033D:  BSF    03.5
033E:  BSF    03.6
033F:  MOVF   09,W
0340:  ANDLW  C0
0341:  MOVWF  09
0342:  BCF    03.6
0343:  BCF    1F.4
0344:  BCF    1F.5
0345:  MOVLW  00
0346:  BSF    03.6
0347:  MOVWF  08
0348:  BCF    03.5
0349:  CLRF   07
034A:  CLRF   08
034B:  CLRF   09
034C:  BCF    03.7
.................... { 
....................    SET_TRIS_D(0X00); 
034D:  MOVLW  00
034E:  BSF    03.5
034F:  BCF    03.6
0350:  MOVWF  08
....................    SET_TRIS_A(0XFF); 
0351:  MOVLW  FF
0352:  MOVWF  05
....................    //INSTALL LCD 
....................    LCD_INIT(); 
0353:  BCF    03.5
0354:  GOTO   0F3
....................    //SETUP ADC 
....................    SETUP_ADC(ADC_CLOCK_INTERNAL); 
0355:  BSF    1F.6
0356:  BSF    1F.7
0357:  BSF    03.5
0358:  BSF    1F.7
0359:  BCF    03.5
035A:  BSF    1F.0
....................    SETUP_ADC_PORTS(SAN1|SAN2|VSS_VDD); 
035B:  BSF    03.5
035C:  BSF    03.6
035D:  MOVF   09,W
035E:  ANDLW  C0
035F:  MOVWF  09
0360:  BCF    03.6
0361:  BCF    1F.4
0362:  BCF    1F.5
0363:  MOVLW  06
0364:  BSF    03.6
0365:  MOVWF  08
....................     
....................    WHILE(TRUE) 
....................    { 
....................       //READ_TEMP1 
....................       SET_ADC_CHANNEL(1); 
0366:  MOVLW  04
0367:  MOVWF  78
0368:  BCF    03.5
0369:  BCF    03.6
036A:  MOVF   1F,W
036B:  ANDLW  C3
036C:  IORWF  78,W
036D:  MOVWF  1F
....................       DELAY_MS(10); 
036E:  MOVLW  0A
036F:  MOVWF  2E
0370:  CALL   020
....................       TEMP1=READ_ADC()/2.046; 
0371:  BSF    1F.1
0372:  BTFSC  1F.1
0373:  GOTO   372
0374:  MOVF   1E,W
0375:  MOVWF  7A
0376:  BSF    03.5
0377:  MOVF   1E,W
0378:  BCF    03.5
0379:  MOVWF  24
037A:  MOVF   1E,W
037B:  MOVWF  25
037C:  MOVWF  27
037D:  MOVF   24,W
037E:  MOVWF  26
037F:  CALL   139
0380:  MOVF   7A,W
0381:  MOVWF  29
0382:  MOVF   79,W
0383:  MOVWF  28
0384:  MOVF   78,W
0385:  MOVWF  27
0386:  MOVF   77,W
0387:  MOVWF  26
0388:  MOVLW  AA
0389:  MOVWF  2D
038A:  MOVLW  F1
038B:  MOVWF  2C
038C:  MOVLW  02
038D:  MOVWF  2B
038E:  MOVLW  80
038F:  MOVWF  2A
0390:  CALL   156
0391:  MOVF   7A,W
0392:  MOVWF  27
0393:  MOVF   79,W
0394:  MOVWF  26
0395:  MOVF   78,W
0396:  MOVWF  25
0397:  MOVF   77,W
0398:  MOVWF  24
0399:  CALL   220
039A:  MOVF   79,W
039B:  MOVWF  21
039C:  MOVF   78,W
039D:  MOVWF  20
....................        
....................       //READ_TEMP2 
....................       SET_ADC_CHANNEL(2); 
039E:  MOVLW  08
039F:  MOVWF  78
03A0:  MOVF   1F,W
03A1:  ANDLW  C3
03A2:  IORWF  78,W
03A3:  MOVWF  1F
....................       DELAY_MS(10); 
03A4:  MOVLW  0A
03A5:  MOVWF  2E
03A6:  CALL   020
....................       TEMP2=READ_ADC()/2.046; 
03A7:  BSF    1F.1
03A8:  BTFSC  1F.1
03A9:  GOTO   3A8
03AA:  MOVF   1E,W
03AB:  MOVWF  7A
03AC:  BSF    03.5
03AD:  MOVF   1E,W
03AE:  BCF    03.5
03AF:  MOVWF  24
03B0:  MOVF   1E,W
03B1:  MOVWF  25
03B2:  MOVWF  27
03B3:  MOVF   24,W
03B4:  MOVWF  26
03B5:  CALL   139
03B6:  MOVF   7A,W
03B7:  MOVWF  29
03B8:  MOVF   79,W
03B9:  MOVWF  28
03BA:  MOVF   78,W
03BB:  MOVWF  27
03BC:  MOVF   77,W
03BD:  MOVWF  26
03BE:  MOVLW  AA
03BF:  MOVWF  2D
03C0:  MOVLW  F1
03C1:  MOVWF  2C
03C2:  MOVLW  02
03C3:  MOVWF  2B
03C4:  MOVLW  80
03C5:  MOVWF  2A
03C6:  CALL   156
03C7:  MOVF   7A,W
03C8:  MOVWF  27
03C9:  MOVF   79,W
03CA:  MOVWF  26
03CB:  MOVF   78,W
03CC:  MOVWF  25
03CD:  MOVF   77,W
03CE:  MOVWF  24
03CF:  CALL   220
03D0:  MOVF   79,W
03D1:  MOVWF  23
03D2:  MOVF   78,W
03D3:  MOVWF  22
....................        
....................       //DISPLAY LCD 
....................       LCD_GOTOXY(1,1); 
03D4:  MOVLW  01
03D5:  MOVWF  2E
03D6:  MOVWF  2F
03D7:  CALL   23F
....................       PRINTF(LCD_PUTC,"T1=%02LU",TEMP1); 
03D8:  MOVLW  54
03D9:  MOVWF  2D
03DA:  CALL   251
03DB:  MOVLW  31
03DC:  MOVWF  2D
03DD:  CALL   251
03DE:  MOVLW  3D
03DF:  MOVWF  2D
03E0:  CALL   251
03E1:  MOVLW  0B
03E2:  MOVWF  04
03E3:  MOVF   21,W
03E4:  MOVWF  25
03E5:  MOVF   20,W
03E6:  MOVWF  24
03E7:  CALL   27D
....................       LCD_PUTC(223);  LCD_PUTC('C'); 
03E8:  MOVLW  DF
03E9:  MOVWF  2D
03EA:  CALL   251
03EB:  MOVLW  43
03EC:  MOVWF  2D
03ED:  CALL   251
....................       LCD_GOTOXY(10,1); 
03EE:  MOVLW  0A
03EF:  MOVWF  2E
03F0:  MOVLW  01
03F1:  MOVWF  2F
03F2:  CALL   23F
....................       PRINTF(LCD_PUTC,"T2=%02LU",TEMP2); 
03F3:  MOVLW  54
03F4:  MOVWF  2D
03F5:  CALL   251
03F6:  MOVLW  32
03F7:  MOVWF  2D
03F8:  CALL   251
03F9:  MOVLW  3D
03FA:  MOVWF  2D
03FB:  CALL   251
03FC:  MOVLW  0B
03FD:  MOVWF  04
03FE:  MOVF   23,W
03FF:  MOVWF  25
0400:  MOVF   22,W
0401:  MOVWF  24
0402:  CALL   27D
....................       LCD_PUTC(223);  LCD_PUTC('C'); 
0403:  MOVLW  DF
0404:  MOVWF  2D
0405:  CALL   251
0406:  MOVLW  43
0407:  MOVWF  2D
0408:  CALL   251
....................       IF(TEMP1>60&&TEMP2<=60) 
0409:  MOVF   21,F
040A:  BTFSS  03.2
040B:  GOTO   410
040C:  MOVF   20,W
040D:  SUBLW  3C
040E:  BTFSC  03.0
040F:  GOTO   424
0410:  MOVF   23,F
0411:  BTFSS  03.2
0412:  GOTO   424
0413:  MOVF   22,W
0414:  SUBLW  3C
0415:  BTFSS  03.0
0416:  GOTO   424
....................       { 
....................          LCD_GOTOXY(3,2); 
0417:  MOVLW  03
0418:  MOVWF  2E
0419:  MOVLW  02
041A:  MOVWF  2F
041B:  CALL   23F
....................          LCD_PUTC("QUA NHIET K1"); 
041C:  MOVLW  04
041D:  BSF    03.6
041E:  MOVWF  0D
041F:  MOVLW  00
0420:  MOVWF  0F
0421:  BCF    03.6
0422:  CALL   2E0
....................       } 
0423:  GOTO   466
....................       ELSE IF(TEMP2>60&&TEMP1<=60) 
0424:  MOVF   23,F
0425:  BTFSS  03.2
0426:  GOTO   42B
0427:  MOVF   22,W
0428:  SUBLW  3C
0429:  BTFSC  03.0
042A:  GOTO   43F
042B:  MOVF   21,F
042C:  BTFSS  03.2
042D:  GOTO   43F
042E:  MOVF   20,W
042F:  SUBLW  3C
0430:  BTFSS  03.0
0431:  GOTO   43F
....................       { 
....................          LCD_GOTOXY(3,2); 
0432:  MOVLW  03
0433:  MOVWF  2E
0434:  MOVLW  02
0435:  MOVWF  2F
0436:  CALL   23F
....................          LCD_PUTC("QUA NHIET K2"); 
0437:  MOVLW  0B
0438:  BSF    03.6
0439:  MOVWF  0D
043A:  MOVLW  00
043B:  MOVWF  0F
043C:  BCF    03.6
043D:  CALL   2E0
....................       } 
043E:  GOTO   466
....................       ELSE IF(TEMP2>60&&TEMP1>60) 
043F:  MOVF   23,F
0440:  BTFSS  03.2
0441:  GOTO   446
0442:  MOVF   22,W
0443:  SUBLW  3C
0444:  BTFSC  03.0
0445:  GOTO   45A
0446:  MOVF   21,F
0447:  BTFSS  03.2
0448:  GOTO   44D
0449:  MOVF   20,W
044A:  SUBLW  3C
044B:  BTFSC  03.0
044C:  GOTO   45A
....................       { 
....................          LCD_GOTOXY(3,2); 
044D:  MOVLW  03
044E:  MOVWF  2E
044F:  MOVLW  02
0450:  MOVWF  2F
0451:  CALL   23F
....................          LCD_PUTC("QUA NHIET 2K"); 
0452:  MOVLW  12
0453:  BSF    03.6
0454:  MOVWF  0D
0455:  MOVLW  00
0456:  MOVWF  0F
0457:  BCF    03.6
0458:  CALL   2E0
....................       } 
0459:  GOTO   466
....................       ELSE 
....................       { 
....................          LCD_GOTOXY(3,2); 
045A:  MOVLW  03
045B:  MOVWF  2E
045C:  MOVLW  02
045D:  MOVWF  2F
045E:  CALL   23F
....................          LCD_PUTC("            ");   
045F:  MOVLW  19
0460:  BSF    03.6
0461:  MOVWF  0D
0462:  MOVLW  00
0463:  MOVWF  0F
0464:  BCF    03.6
0465:  CALL   2E0
....................       } 
0466:  BSF    03.5
0467:  BSF    03.6
0468:  GOTO   366
....................    } 
.................... } 
0469:  SLEEP

Configuration Fuses:
   Word  1: 2FE2   HS NOWDT PUT MCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
